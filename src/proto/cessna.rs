// This file is generated. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(Clone,Default)]
pub struct Cessna {
    // message fields
    propeller_speed: ::std::option::Option<f32>,
    left_aileron: ::std::option::Option<f32>,
    left_flap: ::std::option::Option<f32>,
    right_aileron: ::std::option::Option<f32>,
    right_flap: ::std::option::Option<f32>,
    elevators: ::std::option::Option<f32>,
    rudder: ::std::option::Option<f32>,
    cmd_propeller_speed: ::std::option::Option<f32>,
    cmd_left_aileron: ::std::option::Option<f32>,
    cmd_left_flap: ::std::option::Option<f32>,
    cmd_right_aileron: ::std::option::Option<f32>,
    cmd_right_flap: ::std::option::Option<f32>,
    cmd_elevators: ::std::option::Option<f32>,
    cmd_rudder: ::std::option::Option<f32>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for Cessna {}

impl Cessna {
    pub fn new() -> Cessna {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static Cessna {
        static mut instance: ::protobuf::lazy::Lazy<Cessna> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Cessna,
        };
        unsafe {
            instance.get(|| {
                Cessna {
                    propeller_speed: ::std::option::Option::None,
                    left_aileron: ::std::option::Option::None,
                    left_flap: ::std::option::Option::None,
                    right_aileron: ::std::option::Option::None,
                    right_flap: ::std::option::Option::None,
                    elevators: ::std::option::Option::None,
                    rudder: ::std::option::Option::None,
                    cmd_propeller_speed: ::std::option::Option::None,
                    cmd_left_aileron: ::std::option::Option::None,
                    cmd_left_flap: ::std::option::Option::None,
                    cmd_right_aileron: ::std::option::Option::None,
                    cmd_right_flap: ::std::option::Option::None,
                    cmd_elevators: ::std::option::Option::None,
                    cmd_rudder: ::std::option::Option::None,
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // optional float propeller_speed = 1;

    pub fn clear_propeller_speed(&mut self) {
        self.propeller_speed = ::std::option::Option::None;
    }

    pub fn has_propeller_speed(&self) -> bool {
        self.propeller_speed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_propeller_speed(&mut self, v: f32) {
        self.propeller_speed = ::std::option::Option::Some(v);
    }

    pub fn get_propeller_speed(&self) -> f32 {
        self.propeller_speed.unwrap_or(0.)
    }

    // optional float left_aileron = 2;

    pub fn clear_left_aileron(&mut self) {
        self.left_aileron = ::std::option::Option::None;
    }

    pub fn has_left_aileron(&self) -> bool {
        self.left_aileron.is_some()
    }

    // Param is passed by value, moved
    pub fn set_left_aileron(&mut self, v: f32) {
        self.left_aileron = ::std::option::Option::Some(v);
    }

    pub fn get_left_aileron(&self) -> f32 {
        self.left_aileron.unwrap_or(0.)
    }

    // optional float left_flap = 3;

    pub fn clear_left_flap(&mut self) {
        self.left_flap = ::std::option::Option::None;
    }

    pub fn has_left_flap(&self) -> bool {
        self.left_flap.is_some()
    }

    // Param is passed by value, moved
    pub fn set_left_flap(&mut self, v: f32) {
        self.left_flap = ::std::option::Option::Some(v);
    }

    pub fn get_left_flap(&self) -> f32 {
        self.left_flap.unwrap_or(0.)
    }

    // optional float right_aileron = 4;

    pub fn clear_right_aileron(&mut self) {
        self.right_aileron = ::std::option::Option::None;
    }

    pub fn has_right_aileron(&self) -> bool {
        self.right_aileron.is_some()
    }

    // Param is passed by value, moved
    pub fn set_right_aileron(&mut self, v: f32) {
        self.right_aileron = ::std::option::Option::Some(v);
    }

    pub fn get_right_aileron(&self) -> f32 {
        self.right_aileron.unwrap_or(0.)
    }

    // optional float right_flap = 5;

    pub fn clear_right_flap(&mut self) {
        self.right_flap = ::std::option::Option::None;
    }

    pub fn has_right_flap(&self) -> bool {
        self.right_flap.is_some()
    }

    // Param is passed by value, moved
    pub fn set_right_flap(&mut self, v: f32) {
        self.right_flap = ::std::option::Option::Some(v);
    }

    pub fn get_right_flap(&self) -> f32 {
        self.right_flap.unwrap_or(0.)
    }

    // optional float elevators = 6;

    pub fn clear_elevators(&mut self) {
        self.elevators = ::std::option::Option::None;
    }

    pub fn has_elevators(&self) -> bool {
        self.elevators.is_some()
    }

    // Param is passed by value, moved
    pub fn set_elevators(&mut self, v: f32) {
        self.elevators = ::std::option::Option::Some(v);
    }

    pub fn get_elevators(&self) -> f32 {
        self.elevators.unwrap_or(0.)
    }

    // optional float rudder = 7;

    pub fn clear_rudder(&mut self) {
        self.rudder = ::std::option::Option::None;
    }

    pub fn has_rudder(&self) -> bool {
        self.rudder.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rudder(&mut self, v: f32) {
        self.rudder = ::std::option::Option::Some(v);
    }

    pub fn get_rudder(&self) -> f32 {
        self.rudder.unwrap_or(0.)
    }

    // optional float cmd_propeller_speed = 8;

    pub fn clear_cmd_propeller_speed(&mut self) {
        self.cmd_propeller_speed = ::std::option::Option::None;
    }

    pub fn has_cmd_propeller_speed(&self) -> bool {
        self.cmd_propeller_speed.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cmd_propeller_speed(&mut self, v: f32) {
        self.cmd_propeller_speed = ::std::option::Option::Some(v);
    }

    pub fn get_cmd_propeller_speed(&self) -> f32 {
        self.cmd_propeller_speed.unwrap_or(0.)
    }

    // optional float cmd_left_aileron = 9;

    pub fn clear_cmd_left_aileron(&mut self) {
        self.cmd_left_aileron = ::std::option::Option::None;
    }

    pub fn has_cmd_left_aileron(&self) -> bool {
        self.cmd_left_aileron.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cmd_left_aileron(&mut self, v: f32) {
        self.cmd_left_aileron = ::std::option::Option::Some(v);
    }

    pub fn get_cmd_left_aileron(&self) -> f32 {
        self.cmd_left_aileron.unwrap_or(0.)
    }

    // optional float cmd_left_flap = 10;

    pub fn clear_cmd_left_flap(&mut self) {
        self.cmd_left_flap = ::std::option::Option::None;
    }

    pub fn has_cmd_left_flap(&self) -> bool {
        self.cmd_left_flap.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cmd_left_flap(&mut self, v: f32) {
        self.cmd_left_flap = ::std::option::Option::Some(v);
    }

    pub fn get_cmd_left_flap(&self) -> f32 {
        self.cmd_left_flap.unwrap_or(0.)
    }

    // optional float cmd_right_aileron = 11;

    pub fn clear_cmd_right_aileron(&mut self) {
        self.cmd_right_aileron = ::std::option::Option::None;
    }

    pub fn has_cmd_right_aileron(&self) -> bool {
        self.cmd_right_aileron.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cmd_right_aileron(&mut self, v: f32) {
        self.cmd_right_aileron = ::std::option::Option::Some(v);
    }

    pub fn get_cmd_right_aileron(&self) -> f32 {
        self.cmd_right_aileron.unwrap_or(0.)
    }

    // optional float cmd_right_flap = 12;

    pub fn clear_cmd_right_flap(&mut self) {
        self.cmd_right_flap = ::std::option::Option::None;
    }

    pub fn has_cmd_right_flap(&self) -> bool {
        self.cmd_right_flap.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cmd_right_flap(&mut self, v: f32) {
        self.cmd_right_flap = ::std::option::Option::Some(v);
    }

    pub fn get_cmd_right_flap(&self) -> f32 {
        self.cmd_right_flap.unwrap_or(0.)
    }

    // optional float cmd_elevators = 13;

    pub fn clear_cmd_elevators(&mut self) {
        self.cmd_elevators = ::std::option::Option::None;
    }

    pub fn has_cmd_elevators(&self) -> bool {
        self.cmd_elevators.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cmd_elevators(&mut self, v: f32) {
        self.cmd_elevators = ::std::option::Option::Some(v);
    }

    pub fn get_cmd_elevators(&self) -> f32 {
        self.cmd_elevators.unwrap_or(0.)
    }

    // optional float cmd_rudder = 14;

    pub fn clear_cmd_rudder(&mut self) {
        self.cmd_rudder = ::std::option::Option::None;
    }

    pub fn has_cmd_rudder(&self) -> bool {
        self.cmd_rudder.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cmd_rudder(&mut self, v: f32) {
        self.cmd_rudder = ::std::option::Option::Some(v);
    }

    pub fn get_cmd_rudder(&self) -> f32 {
        self.cmd_rudder.unwrap_or(0.)
    }
}

impl ::protobuf::Message for Cessna {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_float());
                    self.propeller_speed = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_float());
                    self.left_aileron = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_float());
                    self.left_flap = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_float());
                    self.right_aileron = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_float());
                    self.right_flap = ::std::option::Option::Some(tmp);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_float());
                    self.elevators = ::std::option::Option::Some(tmp);
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_float());
                    self.rudder = ::std::option::Option::Some(tmp);
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_float());
                    self.cmd_propeller_speed = ::std::option::Option::Some(tmp);
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_float());
                    self.cmd_left_aileron = ::std::option::Option::Some(tmp);
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_float());
                    self.cmd_left_flap = ::std::option::Option::Some(tmp);
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_float());
                    self.cmd_right_aileron = ::std::option::Option::Some(tmp);
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_float());
                    self.cmd_right_flap = ::std::option::Option::Some(tmp);
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_float());
                    self.cmd_elevators = ::std::option::Option::Some(tmp);
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_float());
                    self.cmd_rudder = ::std::option::Option::Some(tmp);
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.propeller_speed.is_some() {
            my_size += 5;
        };
        if self.left_aileron.is_some() {
            my_size += 5;
        };
        if self.left_flap.is_some() {
            my_size += 5;
        };
        if self.right_aileron.is_some() {
            my_size += 5;
        };
        if self.right_flap.is_some() {
            my_size += 5;
        };
        if self.elevators.is_some() {
            my_size += 5;
        };
        if self.rudder.is_some() {
            my_size += 5;
        };
        if self.cmd_propeller_speed.is_some() {
            my_size += 5;
        };
        if self.cmd_left_aileron.is_some() {
            my_size += 5;
        };
        if self.cmd_left_flap.is_some() {
            my_size += 5;
        };
        if self.cmd_right_aileron.is_some() {
            my_size += 5;
        };
        if self.cmd_right_flap.is_some() {
            my_size += 5;
        };
        if self.cmd_elevators.is_some() {
            my_size += 5;
        };
        if self.cmd_rudder.is_some() {
            my_size += 5;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.propeller_speed {
            try!(os.write_float(1, v));
        };
        if let Some(v) = self.left_aileron {
            try!(os.write_float(2, v));
        };
        if let Some(v) = self.left_flap {
            try!(os.write_float(3, v));
        };
        if let Some(v) = self.right_aileron {
            try!(os.write_float(4, v));
        };
        if let Some(v) = self.right_flap {
            try!(os.write_float(5, v));
        };
        if let Some(v) = self.elevators {
            try!(os.write_float(6, v));
        };
        if let Some(v) = self.rudder {
            try!(os.write_float(7, v));
        };
        if let Some(v) = self.cmd_propeller_speed {
            try!(os.write_float(8, v));
        };
        if let Some(v) = self.cmd_left_aileron {
            try!(os.write_float(9, v));
        };
        if let Some(v) = self.cmd_left_flap {
            try!(os.write_float(10, v));
        };
        if let Some(v) = self.cmd_right_aileron {
            try!(os.write_float(11, v));
        };
        if let Some(v) = self.cmd_right_flap {
            try!(os.write_float(12, v));
        };
        if let Some(v) = self.cmd_elevators {
            try!(os.write_float(13, v));
        };
        if let Some(v) = self.cmd_rudder {
            try!(os.write_float(14, v));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<Cessna>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for Cessna {
    fn new() -> Cessna {
        Cessna::new()
    }

    fn descriptor_static(_: ::std::option::Option<Cessna>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_f32_accessor(
                    "propeller_speed",
                    Cessna::has_propeller_speed,
                    Cessna::get_propeller_speed,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_f32_accessor(
                    "left_aileron",
                    Cessna::has_left_aileron,
                    Cessna::get_left_aileron,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_f32_accessor(
                    "left_flap",
                    Cessna::has_left_flap,
                    Cessna::get_left_flap,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_f32_accessor(
                    "right_aileron",
                    Cessna::has_right_aileron,
                    Cessna::get_right_aileron,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_f32_accessor(
                    "right_flap",
                    Cessna::has_right_flap,
                    Cessna::get_right_flap,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_f32_accessor(
                    "elevators",
                    Cessna::has_elevators,
                    Cessna::get_elevators,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_f32_accessor(
                    "rudder",
                    Cessna::has_rudder,
                    Cessna::get_rudder,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_f32_accessor(
                    "cmd_propeller_speed",
                    Cessna::has_cmd_propeller_speed,
                    Cessna::get_cmd_propeller_speed,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_f32_accessor(
                    "cmd_left_aileron",
                    Cessna::has_cmd_left_aileron,
                    Cessna::get_cmd_left_aileron,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_f32_accessor(
                    "cmd_left_flap",
                    Cessna::has_cmd_left_flap,
                    Cessna::get_cmd_left_flap,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_f32_accessor(
                    "cmd_right_aileron",
                    Cessna::has_cmd_right_aileron,
                    Cessna::get_cmd_right_aileron,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_f32_accessor(
                    "cmd_right_flap",
                    Cessna::has_cmd_right_flap,
                    Cessna::get_cmd_right_flap,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_f32_accessor(
                    "cmd_elevators",
                    Cessna::has_cmd_elevators,
                    Cessna::get_cmd_elevators,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_f32_accessor(
                    "cmd_rudder",
                    Cessna::has_cmd_rudder,
                    Cessna::get_cmd_rudder,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Cessna>(
                    "Cessna",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for Cessna {
    fn clear(&mut self) {
        self.clear_propeller_speed();
        self.clear_left_aileron();
        self.clear_left_flap();
        self.clear_right_aileron();
        self.clear_right_flap();
        self.clear_elevators();
        self.clear_rudder();
        self.clear_cmd_propeller_speed();
        self.clear_cmd_left_aileron();
        self.clear_cmd_left_flap();
        self.clear_cmd_right_aileron();
        self.clear_cmd_right_flap();
        self.clear_cmd_elevators();
        self.clear_cmd_rudder();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for Cessna {
    fn eq(&self, other: &Cessna) -> bool {
        self.propeller_speed == other.propeller_speed &&
        self.left_aileron == other.left_aileron &&
        self.left_flap == other.left_flap &&
        self.right_aileron == other.right_aileron &&
        self.right_flap == other.right_flap &&
        self.elevators == other.elevators &&
        self.rudder == other.rudder &&
        self.cmd_propeller_speed == other.cmd_propeller_speed &&
        self.cmd_left_aileron == other.cmd_left_aileron &&
        self.cmd_left_flap == other.cmd_left_flap &&
        self.cmd_right_aileron == other.cmd_right_aileron &&
        self.cmd_right_flap == other.cmd_right_flap &&
        self.cmd_elevators == other.cmd_elevators &&
        self.cmd_rudder == other.cmd_rudder &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for Cessna {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

static file_descriptor_proto_data: &'static [u8] = &[
    0x0a, 0x0c, 0x63, 0x65, 0x73, 0x73, 0x6e, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b,
    0x67, 0x61, 0x7a, 0x65, 0x62, 0x6f, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x22, 0xc4, 0x02, 0x0a, 0x06,
    0x43, 0x65, 0x73, 0x73, 0x6e, 0x61, 0x12, 0x17, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x6c,
    0x6c, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x12,
    0x14, 0x0a, 0x0c, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x6f, 0x6e, 0x18,
    0x02, 0x20, 0x01, 0x28, 0x02, 0x12, 0x11, 0x0a, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x66, 0x6c,
    0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x12, 0x15, 0x0a, 0x0d, 0x72, 0x69, 0x67, 0x68,
    0x74, 0x5f, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x12,
    0x12, 0x0a, 0x0a, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x70, 0x18, 0x05, 0x20,
    0x01, 0x28, 0x02, 0x12, 0x11, 0x0a, 0x09, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x6f, 0x72, 0x73,
    0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x12, 0x0e, 0x0a, 0x06, 0x72, 0x75, 0x64, 0x64, 0x65, 0x72,
    0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x12, 0x1b, 0x0a, 0x13, 0x63, 0x6d, 0x64, 0x5f, 0x70, 0x72,
    0x6f, 0x70, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x08, 0x20,
    0x01, 0x28, 0x02, 0x12, 0x18, 0x0a, 0x10, 0x63, 0x6d, 0x64, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f,
    0x61, 0x69, 0x6c, 0x65, 0x72, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x12, 0x15, 0x0a,
    0x0d, 0x63, 0x6d, 0x64, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x70, 0x18, 0x0a,
    0x20, 0x01, 0x28, 0x02, 0x12, 0x19, 0x0a, 0x11, 0x63, 0x6d, 0x64, 0x5f, 0x72, 0x69, 0x67, 0x68,
    0x74, 0x5f, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x12,
    0x16, 0x0a, 0x0e, 0x63, 0x6d, 0x64, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x66, 0x6c, 0x61,
    0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x12, 0x15, 0x0a, 0x0d, 0x63, 0x6d, 0x64, 0x5f, 0x65,
    0x6c, 0x65, 0x76, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x12, 0x12,
    0x0a, 0x0a, 0x63, 0x6d, 0x64, 0x5f, 0x72, 0x75, 0x64, 0x64, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01,
    0x28, 0x02, 0x4a, 0xd5, 0x0c, 0x0a, 0x06, 0x12, 0x04, 0x00, 0x00, 0x31, 0x01, 0x0a, 0x08, 0x0a,
    0x01, 0x02, 0x12, 0x03, 0x00, 0x08, 0x13, 0x0a, 0x0a, 0x0a, 0x02, 0x04, 0x00, 0x12, 0x04, 0x06,
    0x00, 0x31, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x00, 0x01, 0x12, 0x03, 0x06, 0x08, 0x0e, 0x0a,
    0x34, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x00, 0x12, 0x03, 0x09, 0x02, 0x25, 0x1a, 0x27, 0x2f, 0x20,
    0x5c, 0x62, 0x72, 0x69, 0x65, 0x66, 0x20, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x52,
    0x50, 0x4d, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x6c,
    0x6c, 0x65, 0x72, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x04, 0x12, 0x03,
    0x09, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x05, 0x12, 0x03, 0x09, 0x0b,
    0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x09, 0x11, 0x20, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x03, 0x12, 0x03, 0x09, 0x23, 0x24, 0x0a, 0x3a, 0x0a,
    0x04, 0x04, 0x00, 0x02, 0x01, 0x12, 0x03, 0x0c, 0x02, 0x22, 0x1a, 0x2d, 0x2f, 0x20, 0x5c, 0x62,
    0x72, 0x69, 0x65, 0x66, 0x20, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x6c, 0x65, 0x66,
    0x74, 0x20, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x6f, 0x6e, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20,
    0x69, 0x6e, 0x20, 0x72, 0x61, 0x64, 0x73, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02,
    0x01, 0x04, 0x12, 0x03, 0x0c, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x05,
    0x12, 0x03, 0x0c, 0x0b, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03,
    0x0c, 0x11, 0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x03, 0x12, 0x03, 0x0c, 0x20,
    0x21, 0x0a, 0x37, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x02, 0x12, 0x03, 0x0f, 0x02, 0x1f, 0x1a, 0x2a,
    0x2f, 0x20, 0x5c, 0x62, 0x72, 0x69, 0x65, 0x66, 0x20, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
    0x20, 0x6c, 0x65, 0x66, 0x74, 0x20, 0x66, 0x6c, 0x61, 0x70, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65,
    0x20, 0x69, 0x6e, 0x20, 0x72, 0x61, 0x64, 0x73, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00,
    0x02, 0x02, 0x04, 0x12, 0x03, 0x0f, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02,
    0x05, 0x12, 0x03, 0x0f, 0x0b, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x01, 0x12,
    0x03, 0x0f, 0x11, 0x1a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x03, 0x12, 0x03, 0x0f,
    0x1d, 0x1e, 0x0a, 0x3b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x03, 0x12, 0x03, 0x12, 0x02, 0x23, 0x1a,
    0x2e, 0x2f, 0x20, 0x5c, 0x62, 0x72, 0x69, 0x65, 0x66, 0x20, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
    0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x6f, 0x6e, 0x20,
    0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x72, 0x61, 0x64, 0x73, 0x2e, 0x0a, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x03, 0x04, 0x12, 0x03, 0x12, 0x02, 0x0a, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x03, 0x05, 0x12, 0x03, 0x12, 0x0b, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x03, 0x01, 0x12, 0x03, 0x12, 0x11, 0x1e, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02,
    0x03, 0x03, 0x12, 0x03, 0x12, 0x21, 0x22, 0x0a, 0x38, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x04, 0x12,
    0x03, 0x15, 0x02, 0x20, 0x1a, 0x2b, 0x2f, 0x20, 0x5c, 0x62, 0x72, 0x69, 0x65, 0x66, 0x20, 0x43,
    0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x66, 0x6c, 0x61,
    0x70, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x72, 0x61, 0x64, 0x73, 0x2e,
    0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x04, 0x04, 0x12, 0x03, 0x15, 0x02, 0x0a, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x04, 0x05, 0x12, 0x03, 0x15, 0x0b, 0x10, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x04, 0x01, 0x12, 0x03, 0x15, 0x11, 0x1b, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x04, 0x03, 0x12, 0x03, 0x15, 0x1e, 0x1f, 0x0a, 0x37, 0x0a, 0x04, 0x04, 0x00, 0x02,
    0x05, 0x12, 0x03, 0x18, 0x02, 0x1f, 0x1a, 0x2a, 0x2f, 0x20, 0x5c, 0x62, 0x72, 0x69, 0x65, 0x66,
    0x20, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x74, 0x6f,
    0x72, 0x73, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x72, 0x61, 0x64, 0x73,
    0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x05, 0x04, 0x12, 0x03, 0x18, 0x02, 0x0a,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x05, 0x05, 0x12, 0x03, 0x18, 0x0b, 0x10, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x00, 0x02, 0x05, 0x01, 0x12, 0x03, 0x18, 0x11, 0x1a, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x00, 0x02, 0x05, 0x03, 0x12, 0x03, 0x18, 0x1d, 0x1e, 0x0a, 0x34, 0x0a, 0x04, 0x04, 0x00,
    0x02, 0x06, 0x12, 0x03, 0x1b, 0x02, 0x1c, 0x1a, 0x27, 0x2f, 0x20, 0x5c, 0x62, 0x72, 0x69, 0x65,
    0x66, 0x20, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x72, 0x75, 0x64, 0x64, 0x6c, 0x65,
    0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x72, 0x61, 0x64, 0x73, 0x2e, 0x0a,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x06, 0x04, 0x12, 0x03, 0x1b, 0x02, 0x0a, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x00, 0x02, 0x06, 0x05, 0x12, 0x03, 0x1b, 0x0b, 0x10, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x00, 0x02, 0x06, 0x01, 0x12, 0x03, 0x1b, 0x11, 0x17, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00,
    0x02, 0x06, 0x03, 0x12, 0x03, 0x1b, 0x1a, 0x1b, 0x0a, 0x33, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x07,
    0x12, 0x03, 0x1e, 0x02, 0x29, 0x1a, 0x26, 0x2f, 0x20, 0x5c, 0x62, 0x72, 0x69, 0x65, 0x66, 0x20,
    0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x52, 0x50, 0x4d, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
    0x65, 0x20, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x07, 0x04, 0x12, 0x03, 0x1e, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x07, 0x05, 0x12, 0x03, 0x1e, 0x0b, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02,
    0x07, 0x01, 0x12, 0x03, 0x1e, 0x11, 0x24, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x07, 0x03,
    0x12, 0x03, 0x1e, 0x27, 0x28, 0x0a, 0x39, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x08, 0x12, 0x03, 0x21,
    0x02, 0x26, 0x1a, 0x2c, 0x2f, 0x20, 0x5c, 0x62, 0x72, 0x69, 0x65, 0x66, 0x20, 0x54, 0x61, 0x72,
    0x67, 0x65, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x20, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x6f, 0x6e,
    0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x72, 0x61, 0x64, 0x73, 0x2e, 0x0a,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x08, 0x04, 0x12, 0x03, 0x21, 0x02, 0x0a, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x00, 0x02, 0x08, 0x05, 0x12, 0x03, 0x21, 0x0b, 0x10, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x00, 0x02, 0x08, 0x01, 0x12, 0x03, 0x21, 0x11, 0x21, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00,
    0x02, 0x08, 0x03, 0x12, 0x03, 0x21, 0x24, 0x25, 0x0a, 0x36, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x09,
    0x12, 0x03, 0x24, 0x02, 0x24, 0x1a, 0x29, 0x2f, 0x20, 0x5c, 0x62, 0x72, 0x69, 0x65, 0x66, 0x20,
    0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x20, 0x66, 0x6c, 0x61, 0x70,
    0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x72, 0x61, 0x64, 0x73, 0x2e, 0x0a,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x09, 0x04, 0x12, 0x03, 0x24, 0x02, 0x0a, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x00, 0x02, 0x09, 0x05, 0x12, 0x03, 0x24, 0x0b, 0x10, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x00, 0x02, 0x09, 0x01, 0x12, 0x03, 0x24, 0x11, 0x1e, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00,
    0x02, 0x09, 0x03, 0x12, 0x03, 0x24, 0x21, 0x23, 0x0a, 0x3a, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x0a,
    0x12, 0x03, 0x27, 0x02, 0x28, 0x1a, 0x2d, 0x2f, 0x20, 0x5c, 0x62, 0x72, 0x69, 0x65, 0x66, 0x20,
    0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x61, 0x69, 0x6c,
    0x65, 0x72, 0x6f, 0x6e, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x72, 0x61,
    0x64, 0x73, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x0a, 0x04, 0x12, 0x03, 0x27,
    0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x0a, 0x05, 0x12, 0x03, 0x27, 0x0b, 0x10,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x0a, 0x01, 0x12, 0x03, 0x27, 0x11, 0x22, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x00, 0x02, 0x0a, 0x03, 0x12, 0x03, 0x27, 0x25, 0x27, 0x0a, 0x37, 0x0a, 0x04,
    0x04, 0x00, 0x02, 0x0b, 0x12, 0x03, 0x2a, 0x02, 0x25, 0x1a, 0x2a, 0x2f, 0x20, 0x5c, 0x62, 0x72,
    0x69, 0x65, 0x66, 0x20, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74,
    0x20, 0x66, 0x6c, 0x61, 0x70, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x72,
    0x61, 0x64, 0x73, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x0b, 0x04, 0x12, 0x03,
    0x2a, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x0b, 0x05, 0x12, 0x03, 0x2a, 0x0b,
    0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x0b, 0x01, 0x12, 0x03, 0x2a, 0x11, 0x1f, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x0b, 0x03, 0x12, 0x03, 0x2a, 0x22, 0x24, 0x0a, 0x36, 0x0a,
    0x04, 0x04, 0x00, 0x02, 0x0c, 0x12, 0x03, 0x2d, 0x02, 0x24, 0x1a, 0x29, 0x2f, 0x20, 0x5c, 0x62,
    0x72, 0x69, 0x65, 0x66, 0x20, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x65, 0x6c, 0x65, 0x76,
    0x61, 0x74, 0x6f, 0x72, 0x73, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x72,
    0x61, 0x64, 0x73, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x0c, 0x04, 0x12, 0x03,
    0x2d, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x0c, 0x05, 0x12, 0x03, 0x2d, 0x0b,
    0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x0c, 0x01, 0x12, 0x03, 0x2d, 0x11, 0x1e, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x0c, 0x03, 0x12, 0x03, 0x2d, 0x21, 0x23, 0x0a, 0x33, 0x0a,
    0x04, 0x04, 0x00, 0x02, 0x0d, 0x12, 0x03, 0x30, 0x02, 0x21, 0x1a, 0x26, 0x2f, 0x20, 0x5c, 0x62,
    0x72, 0x69, 0x65, 0x66, 0x20, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x72, 0x75, 0x64, 0x64,
    0x6c, 0x65, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x20, 0x72, 0x61, 0x64, 0x73,
    0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x0d, 0x04, 0x12, 0x03, 0x30, 0x02, 0x0a,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x0d, 0x05, 0x12, 0x03, 0x30, 0x0b, 0x10, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x00, 0x02, 0x0d, 0x01, 0x12, 0x03, 0x30, 0x11, 0x1b, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x00, 0x02, 0x0d, 0x03, 0x12, 0x03, 0x30, 0x1e, 0x20,
];

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
