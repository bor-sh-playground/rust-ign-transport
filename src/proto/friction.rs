// This file is generated. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(Clone,Default)]
pub struct Friction {
    // message fields
    mu: ::std::option::Option<f64>,
    mu2: ::std::option::Option<f64>,
    fdir1: ::protobuf::SingularPtrField<super::vector3d::Vector3d>,
    slip1: ::std::option::Option<f64>,
    slip2: ::std::option::Option<f64>,
    torsional: ::protobuf::SingularPtrField<Friction_Torsional>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for Friction {}

impl Friction {
    pub fn new() -> Friction {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static Friction {
        static mut instance: ::protobuf::lazy::Lazy<Friction> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Friction,
        };
        unsafe {
            instance.get(|| {
                Friction {
                    mu: ::std::option::Option::None,
                    mu2: ::std::option::Option::None,
                    fdir1: ::protobuf::SingularPtrField::none(),
                    slip1: ::std::option::Option::None,
                    slip2: ::std::option::Option::None,
                    torsional: ::protobuf::SingularPtrField::none(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // optional double mu = 1;

    pub fn clear_mu(&mut self) {
        self.mu = ::std::option::Option::None;
    }

    pub fn has_mu(&self) -> bool {
        self.mu.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mu(&mut self, v: f64) {
        self.mu = ::std::option::Option::Some(v);
    }

    pub fn get_mu(&self) -> f64 {
        self.mu.unwrap_or(0.)
    }

    // optional double mu2 = 2;

    pub fn clear_mu2(&mut self) {
        self.mu2 = ::std::option::Option::None;
    }

    pub fn has_mu2(&self) -> bool {
        self.mu2.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mu2(&mut self, v: f64) {
        self.mu2 = ::std::option::Option::Some(v);
    }

    pub fn get_mu2(&self) -> f64 {
        self.mu2.unwrap_or(0.)
    }

    // optional .gazebo.msgs.Vector3d fdir1 = 3;

    pub fn clear_fdir1(&mut self) {
        self.fdir1.clear();
    }

    pub fn has_fdir1(&self) -> bool {
        self.fdir1.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fdir1(&mut self, v: super::vector3d::Vector3d) {
        self.fdir1 = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fdir1(&mut self) -> &mut super::vector3d::Vector3d {
        if self.fdir1.is_none() {
            self.fdir1.set_default();
        };
        self.fdir1.as_mut().unwrap()
    }

    // Take field
    pub fn take_fdir1(&mut self) -> super::vector3d::Vector3d {
        self.fdir1.take().unwrap_or_else(|| super::vector3d::Vector3d::new())
    }

    pub fn get_fdir1(&self) -> &super::vector3d::Vector3d {
        self.fdir1.as_ref().unwrap_or_else(|| super::vector3d::Vector3d::default_instance())
    }

    // optional double slip1 = 4;

    pub fn clear_slip1(&mut self) {
        self.slip1 = ::std::option::Option::None;
    }

    pub fn has_slip1(&self) -> bool {
        self.slip1.is_some()
    }

    // Param is passed by value, moved
    pub fn set_slip1(&mut self, v: f64) {
        self.slip1 = ::std::option::Option::Some(v);
    }

    pub fn get_slip1(&self) -> f64 {
        self.slip1.unwrap_or(0.)
    }

    // optional double slip2 = 5;

    pub fn clear_slip2(&mut self) {
        self.slip2 = ::std::option::Option::None;
    }

    pub fn has_slip2(&self) -> bool {
        self.slip2.is_some()
    }

    // Param is passed by value, moved
    pub fn set_slip2(&mut self, v: f64) {
        self.slip2 = ::std::option::Option::Some(v);
    }

    pub fn get_slip2(&self) -> f64 {
        self.slip2.unwrap_or(0.)
    }

    // optional .gazebo.msgs.Friction.Torsional torsional = 6;

    pub fn clear_torsional(&mut self) {
        self.torsional.clear();
    }

    pub fn has_torsional(&self) -> bool {
        self.torsional.is_some()
    }

    // Param is passed by value, moved
    pub fn set_torsional(&mut self, v: Friction_Torsional) {
        self.torsional = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_torsional(&mut self) -> &mut Friction_Torsional {
        if self.torsional.is_none() {
            self.torsional.set_default();
        };
        self.torsional.as_mut().unwrap()
    }

    // Take field
    pub fn take_torsional(&mut self) -> Friction_Torsional {
        self.torsional.take().unwrap_or_else(|| Friction_Torsional::new())
    }

    pub fn get_torsional(&self) -> &Friction_Torsional {
        self.torsional.as_ref().unwrap_or_else(|| Friction_Torsional::default_instance())
    }
}

impl ::protobuf::Message for Friction {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_double());
                    self.mu = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_double());
                    self.mu2 = ::std::option::Option::Some(tmp);
                },
                3 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.fdir1));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_double());
                    self.slip1 = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_double());
                    self.slip2 = ::std::option::Option::Some(tmp);
                },
                6 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.torsional));
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.mu.is_some() {
            my_size += 9;
        };
        if self.mu2.is_some() {
            my_size += 9;
        };
        for value in &self.fdir1 {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.slip1.is_some() {
            my_size += 9;
        };
        if self.slip2.is_some() {
            my_size += 9;
        };
        for value in &self.torsional {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.mu {
            try!(os.write_double(1, v));
        };
        if let Some(v) = self.mu2 {
            try!(os.write_double(2, v));
        };
        if let Some(v) = self.fdir1.as_ref() {
            try!(os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.slip1 {
            try!(os.write_double(4, v));
        };
        if let Some(v) = self.slip2 {
            try!(os.write_double(5, v));
        };
        if let Some(v) = self.torsional.as_ref() {
            try!(os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<Friction>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for Friction {
    fn new() -> Friction {
        Friction::new()
    }

    fn descriptor_static(_: ::std::option::Option<Friction>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_f64_accessor(
                    "mu",
                    Friction::has_mu,
                    Friction::get_mu,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_f64_accessor(
                    "mu2",
                    Friction::has_mu2,
                    Friction::get_mu2,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "fdir1",
                    Friction::has_fdir1,
                    Friction::get_fdir1,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_f64_accessor(
                    "slip1",
                    Friction::has_slip1,
                    Friction::get_slip1,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_f64_accessor(
                    "slip2",
                    Friction::has_slip2,
                    Friction::get_slip2,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "torsional",
                    Friction::has_torsional,
                    Friction::get_torsional,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Friction>(
                    "Friction",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for Friction {
    fn clear(&mut self) {
        self.clear_mu();
        self.clear_mu2();
        self.clear_fdir1();
        self.clear_slip1();
        self.clear_slip2();
        self.clear_torsional();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for Friction {
    fn eq(&self, other: &Friction) -> bool {
        self.mu == other.mu &&
        self.mu2 == other.mu2 &&
        self.fdir1 == other.fdir1 &&
        self.slip1 == other.slip1 &&
        self.slip2 == other.slip2 &&
        self.torsional == other.torsional &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for Friction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct Friction_Torsional {
    // message fields
    coefficient: ::std::option::Option<f64>,
    use_patch_radius: ::std::option::Option<bool>,
    patch_radius: ::std::option::Option<f64>,
    surface_radius: ::std::option::Option<f64>,
    ode: ::protobuf::SingularPtrField<Friction_Torsional_ODE>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for Friction_Torsional {}

impl Friction_Torsional {
    pub fn new() -> Friction_Torsional {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static Friction_Torsional {
        static mut instance: ::protobuf::lazy::Lazy<Friction_Torsional> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Friction_Torsional,
        };
        unsafe {
            instance.get(|| {
                Friction_Torsional {
                    coefficient: ::std::option::Option::None,
                    use_patch_radius: ::std::option::Option::None,
                    patch_radius: ::std::option::Option::None,
                    surface_radius: ::std::option::Option::None,
                    ode: ::protobuf::SingularPtrField::none(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // optional double coefficient = 1;

    pub fn clear_coefficient(&mut self) {
        self.coefficient = ::std::option::Option::None;
    }

    pub fn has_coefficient(&self) -> bool {
        self.coefficient.is_some()
    }

    // Param is passed by value, moved
    pub fn set_coefficient(&mut self, v: f64) {
        self.coefficient = ::std::option::Option::Some(v);
    }

    pub fn get_coefficient(&self) -> f64 {
        self.coefficient.unwrap_or(0.)
    }

    // optional bool use_patch_radius = 2;

    pub fn clear_use_patch_radius(&mut self) {
        self.use_patch_radius = ::std::option::Option::None;
    }

    pub fn has_use_patch_radius(&self) -> bool {
        self.use_patch_radius.is_some()
    }

    // Param is passed by value, moved
    pub fn set_use_patch_radius(&mut self, v: bool) {
        self.use_patch_radius = ::std::option::Option::Some(v);
    }

    pub fn get_use_patch_radius(&self) -> bool {
        self.use_patch_radius.unwrap_or(false)
    }

    // optional double patch_radius = 3;

    pub fn clear_patch_radius(&mut self) {
        self.patch_radius = ::std::option::Option::None;
    }

    pub fn has_patch_radius(&self) -> bool {
        self.patch_radius.is_some()
    }

    // Param is passed by value, moved
    pub fn set_patch_radius(&mut self, v: f64) {
        self.patch_radius = ::std::option::Option::Some(v);
    }

    pub fn get_patch_radius(&self) -> f64 {
        self.patch_radius.unwrap_or(0.)
    }

    // optional double surface_radius = 4;

    pub fn clear_surface_radius(&mut self) {
        self.surface_radius = ::std::option::Option::None;
    }

    pub fn has_surface_radius(&self) -> bool {
        self.surface_radius.is_some()
    }

    // Param is passed by value, moved
    pub fn set_surface_radius(&mut self, v: f64) {
        self.surface_radius = ::std::option::Option::Some(v);
    }

    pub fn get_surface_radius(&self) -> f64 {
        self.surface_radius.unwrap_or(0.)
    }

    // optional .gazebo.msgs.Friction.Torsional.ODE ode = 5;

    pub fn clear_ode(&mut self) {
        self.ode.clear();
    }

    pub fn has_ode(&self) -> bool {
        self.ode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ode(&mut self, v: Friction_Torsional_ODE) {
        self.ode = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ode(&mut self) -> &mut Friction_Torsional_ODE {
        if self.ode.is_none() {
            self.ode.set_default();
        };
        self.ode.as_mut().unwrap()
    }

    // Take field
    pub fn take_ode(&mut self) -> Friction_Torsional_ODE {
        self.ode.take().unwrap_or_else(|| Friction_Torsional_ODE::new())
    }

    pub fn get_ode(&self) -> &Friction_Torsional_ODE {
        self.ode.as_ref().unwrap_or_else(|| Friction_Torsional_ODE::default_instance())
    }
}

impl ::protobuf::Message for Friction_Torsional {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_double());
                    self.coefficient = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_bool());
                    self.use_patch_radius = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_double());
                    self.patch_radius = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_double());
                    self.surface_radius = ::std::option::Option::Some(tmp);
                },
                5 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ode));
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.coefficient.is_some() {
            my_size += 9;
        };
        if self.use_patch_radius.is_some() {
            my_size += 2;
        };
        if self.patch_radius.is_some() {
            my_size += 9;
        };
        if self.surface_radius.is_some() {
            my_size += 9;
        };
        for value in &self.ode {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.coefficient {
            try!(os.write_double(1, v));
        };
        if let Some(v) = self.use_patch_radius {
            try!(os.write_bool(2, v));
        };
        if let Some(v) = self.patch_radius {
            try!(os.write_double(3, v));
        };
        if let Some(v) = self.surface_radius {
            try!(os.write_double(4, v));
        };
        if let Some(v) = self.ode.as_ref() {
            try!(os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<Friction_Torsional>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for Friction_Torsional {
    fn new() -> Friction_Torsional {
        Friction_Torsional::new()
    }

    fn descriptor_static(_: ::std::option::Option<Friction_Torsional>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_f64_accessor(
                    "coefficient",
                    Friction_Torsional::has_coefficient,
                    Friction_Torsional::get_coefficient,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor(
                    "use_patch_radius",
                    Friction_Torsional::has_use_patch_radius,
                    Friction_Torsional::get_use_patch_radius,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_f64_accessor(
                    "patch_radius",
                    Friction_Torsional::has_patch_radius,
                    Friction_Torsional::get_patch_radius,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_f64_accessor(
                    "surface_radius",
                    Friction_Torsional::has_surface_radius,
                    Friction_Torsional::get_surface_radius,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "ode",
                    Friction_Torsional::has_ode,
                    Friction_Torsional::get_ode,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Friction_Torsional>(
                    "Friction_Torsional",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for Friction_Torsional {
    fn clear(&mut self) {
        self.clear_coefficient();
        self.clear_use_patch_radius();
        self.clear_patch_radius();
        self.clear_surface_radius();
        self.clear_ode();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for Friction_Torsional {
    fn eq(&self, other: &Friction_Torsional) -> bool {
        self.coefficient == other.coefficient &&
        self.use_patch_radius == other.use_patch_radius &&
        self.patch_radius == other.patch_radius &&
        self.surface_radius == other.surface_radius &&
        self.ode == other.ode &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for Friction_Torsional {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct Friction_Torsional_ODE {
    // message fields
    slip: ::std::option::Option<f64>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for Friction_Torsional_ODE {}

impl Friction_Torsional_ODE {
    pub fn new() -> Friction_Torsional_ODE {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static Friction_Torsional_ODE {
        static mut instance: ::protobuf::lazy::Lazy<Friction_Torsional_ODE> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Friction_Torsional_ODE,
        };
        unsafe {
            instance.get(|| {
                Friction_Torsional_ODE {
                    slip: ::std::option::Option::None,
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // optional double slip = 1;

    pub fn clear_slip(&mut self) {
        self.slip = ::std::option::Option::None;
    }

    pub fn has_slip(&self) -> bool {
        self.slip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_slip(&mut self, v: f64) {
        self.slip = ::std::option::Option::Some(v);
    }

    pub fn get_slip(&self) -> f64 {
        self.slip.unwrap_or(0.)
    }
}

impl ::protobuf::Message for Friction_Torsional_ODE {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_double());
                    self.slip = ::std::option::Option::Some(tmp);
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.slip.is_some() {
            my_size += 9;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.slip {
            try!(os.write_double(1, v));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<Friction_Torsional_ODE>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for Friction_Torsional_ODE {
    fn new() -> Friction_Torsional_ODE {
        Friction_Torsional_ODE::new()
    }

    fn descriptor_static(_: ::std::option::Option<Friction_Torsional_ODE>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_f64_accessor(
                    "slip",
                    Friction_Torsional_ODE::has_slip,
                    Friction_Torsional_ODE::get_slip,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Friction_Torsional_ODE>(
                    "Friction_Torsional_ODE",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for Friction_Torsional_ODE {
    fn clear(&mut self) {
        self.clear_slip();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for Friction_Torsional_ODE {
    fn eq(&self, other: &Friction_Torsional_ODE) -> bool {
        self.slip == other.slip &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for Friction_Torsional_ODE {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

static file_descriptor_proto_data: &'static [u8] = &[
    0x0a, 0x0e, 0x66, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
    0x12, 0x0b, 0x67, 0x61, 0x7a, 0x65, 0x62, 0x6f, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x1a, 0x0e, 0x76,
    0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcd, 0x02,
    0x0a, 0x08, 0x46, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0a, 0x0a, 0x02, 0x6d, 0x75,
    0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x12, 0x0b, 0x0a, 0x03, 0x6d, 0x75, 0x32, 0x18, 0x02, 0x20,
    0x01, 0x28, 0x01, 0x12, 0x24, 0x0a, 0x05, 0x66, 0x64, 0x69, 0x72, 0x31, 0x18, 0x03, 0x20, 0x01,
    0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x61, 0x7a, 0x65, 0x62, 0x6f, 0x2e, 0x6d, 0x73, 0x67, 0x73,
    0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x64, 0x12, 0x0d, 0x0a, 0x05, 0x73, 0x6c, 0x69,
    0x70, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x12, 0x0d, 0x0a, 0x05, 0x73, 0x6c, 0x69, 0x70,
    0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x12, 0x32, 0x0a, 0x09, 0x74, 0x6f, 0x72, 0x73, 0x69,
    0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x61, 0x7a,
    0x65, 0x62, 0x6f, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x46, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
    0x6e, 0x2e, 0x54, 0x6f, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x1a, 0xaf, 0x01, 0x0a, 0x09,
    0x54, 0x6f, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x13, 0x0a, 0x0b, 0x63, 0x6f, 0x65,
    0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x12, 0x18,
    0x0a, 0x10, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x61, 0x64, 0x69,
    0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x12, 0x14, 0x0a, 0x0c, 0x70, 0x61, 0x74, 0x63,
    0x68, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x12, 0x16,
    0x0a, 0x0e, 0x73, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73,
    0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x12, 0x30, 0x0a, 0x03, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20,
    0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x61, 0x7a, 0x65, 0x62, 0x6f, 0x2e, 0x6d, 0x73, 0x67,
    0x73, 0x2e, 0x46, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x6f, 0x72, 0x73, 0x69,
    0x6f, 0x6e, 0x61, 0x6c, 0x2e, 0x4f, 0x44, 0x45, 0x1a, 0x13, 0x0a, 0x03, 0x4f, 0x44, 0x45, 0x12,
    0x0c, 0x0a, 0x04, 0x73, 0x6c, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x4a, 0xe1, 0x10,
    0x0a, 0x06, 0x12, 0x04, 0x00, 0x00, 0x3b, 0x01, 0x0a, 0x08, 0x0a, 0x01, 0x02, 0x12, 0x03, 0x00,
    0x08, 0x13, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x00, 0x12, 0x03, 0x06, 0x07, 0x17, 0x0a, 0x0a, 0x0a,
    0x02, 0x04, 0x00, 0x12, 0x04, 0x08, 0x00, 0x3b, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x00, 0x01,
    0x12, 0x03, 0x08, 0x08, 0x10, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x00, 0x03, 0x00, 0x12, 0x04, 0x0a,
    0x02, 0x26, 0x03, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x03, 0x00, 0x01, 0x12, 0x03, 0x0a, 0x0a,
    0x13, 0x0a, 0x0e, 0x0a, 0x06, 0x04, 0x00, 0x03, 0x00, 0x03, 0x00, 0x12, 0x04, 0x0c, 0x04, 0x11,
    0x05, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x03, 0x00, 0x01, 0x12, 0x03, 0x0c, 0x0c,
    0x0f, 0x0a, 0x66, 0x0a, 0x08, 0x04, 0x00, 0x03, 0x00, 0x03, 0x00, 0x02, 0x00, 0x12, 0x03, 0x10,
    0x06, 0x1f, 0x1a, 0x55, 0x2f, 0x20, 0x5c, 0x62, 0x72, 0x69, 0x65, 0x66, 0x20, 0x46, 0x6f, 0x72,
    0x63, 0x65, 0x20, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x6c, 0x69,
    0x70, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x6f, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20,
    0x66, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65,
    0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x0a, 0x2f, 0x20, 0x6f, 0x66,
    0x20, 0x5b, 0x30, 0x2e, 0x2e, 0x31, 0x5d, 0x2e, 0x0a, 0x0a, 0x10, 0x0a, 0x09, 0x04, 0x00, 0x03,
    0x00, 0x03, 0x00, 0x02, 0x00, 0x04, 0x12, 0x03, 0x10, 0x06, 0x0e, 0x0a, 0x10, 0x0a, 0x09, 0x04,
    0x00, 0x03, 0x00, 0x03, 0x00, 0x02, 0x00, 0x05, 0x12, 0x03, 0x10, 0x0f, 0x15, 0x0a, 0x10, 0x0a,
    0x09, 0x04, 0x00, 0x03, 0x00, 0x03, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x10, 0x16, 0x1a, 0x0a,
    0x10, 0x0a, 0x09, 0x04, 0x00, 0x03, 0x00, 0x03, 0x00, 0x02, 0x00, 0x03, 0x12, 0x03, 0x10, 0x1d,
    0x1e, 0x0a, 0x52, 0x0a, 0x06, 0x04, 0x00, 0x03, 0x00, 0x02, 0x00, 0x12, 0x03, 0x14, 0x04, 0x24,
    0x1a, 0x43, 0x2f, 0x20, 0x5c, 0x62, 0x72, 0x69, 0x65, 0x66, 0x20, 0x54, 0x6f, 0x72, 0x73, 0x69,
    0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74,
    0x20, 0x6f, 0x66, 0x20, 0x66, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x5b, 0x30, 0x2e,
    0x2e, 0x31, 0x5d, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x00, 0x04,
    0x12, 0x03, 0x14, 0x04, 0x0c, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x00, 0x05,
    0x12, 0x03, 0x14, 0x0d, 0x13, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x00, 0x01,
    0x12, 0x03, 0x14, 0x14, 0x1f, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x00, 0x03,
    0x12, 0x03, 0x14, 0x22, 0x23, 0x0a, 0xce, 0x02, 0x0a, 0x06, 0x04, 0x00, 0x03, 0x00, 0x02, 0x01,
    0x12, 0x03, 0x1b, 0x04, 0x27, 0x1a, 0xbe, 0x02, 0x2f, 0x20, 0x5c, 0x62, 0x72, 0x69, 0x65, 0x66,
    0x20, 0x42, 0x79, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2c, 0x20, 0x74, 0x6f, 0x72,
    0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x66, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20,
    0x69, 0x73, 0x20, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x20, 0x75, 0x73,
    0x69, 0x6e, 0x67, 0x20, 0x74, 0x68, 0x65, 0x0a, 0x2f, 0x20, 0x22, 0x70, 0x61, 0x74, 0x63, 0x68,
    0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x22, 0x2c, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20,
    0x69, 0x73, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x52, 0x2a, 0x64, 0x29, 0x2c, 0x20, 0x77, 0x68,
    0x65, 0x72, 0x65, 0x20, 0x22, 0x52, 0x22, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72,
    0x61, 0x64, 0x69, 0x75, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x0a, 0x2f, 0x20, 0x63,
    0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x20, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x20, 0x28, 0x73,
    0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x29, 0x20, 0x61,
    0x6e, 0x64, 0x20, 0x22, 0x64, 0x22, 0x20, 0x69, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f,
    0x6e, 0x74, 0x61, 0x63, 0x74, 0x0a, 0x2f, 0x20, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x20, 0x49,
    0x66, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x66, 0x6c, 0x61, 0x67, 0x20, 0x69, 0x73, 0x20, 0x73,
    0x65, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x2c, 0x20, 0x73, 0x75, 0x72,
    0x66, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20,
    0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x20, 0x64, 0x65, 0x70, 0x74, 0x68, 0x0a, 0x2f, 0x20,
    0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x73,
    0x74, 0x65, 0x61, 0x64, 0x20, 0x6f, 0x66, 0x20, 0x70, 0x61, 0x74, 0x63, 0x68, 0x20, 0x72, 0x61,
    0x64, 0x69, 0x75, 0x73, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x01,
    0x04, 0x12, 0x03, 0x1b, 0x04, 0x0c, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x01,
    0x05, 0x12, 0x03, 0x1b, 0x0d, 0x11, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x01,
    0x01, 0x12, 0x03, 0x1b, 0x12, 0x22, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x01,
    0x03, 0x12, 0x03, 0x1b, 0x25, 0x26, 0x0a, 0x56, 0x0a, 0x06, 0x04, 0x00, 0x03, 0x00, 0x02, 0x02,
    0x12, 0x03, 0x1e, 0x04, 0x25, 0x1a, 0x47, 0x2f, 0x20, 0x5c, 0x62, 0x72, 0x69, 0x65, 0x66, 0x20,
    0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
    0x74, 0x20, 0x70, 0x61, 0x74, 0x63, 0x68, 0x20, 0x73, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2c,
    0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x6f, 0x72, 0x73, 0x69, 0x6f,
    0x6e, 0x61, 0x6c, 0x20, 0x66, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x0a, 0x0a, 0x0e,
    0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x02, 0x04, 0x12, 0x03, 0x1e, 0x04, 0x0c, 0x0a, 0x0e,
    0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x02, 0x05, 0x12, 0x03, 0x1e, 0x0d, 0x13, 0x0a, 0x0e,
    0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x02, 0x01, 0x12, 0x03, 0x1e, 0x14, 0x20, 0x0a, 0x0e,
    0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x02, 0x03, 0x12, 0x03, 0x1e, 0x23, 0x24, 0x0a, 0x5f,
    0x0a, 0x06, 0x04, 0x00, 0x03, 0x00, 0x02, 0x03, 0x12, 0x03, 0x22, 0x04, 0x27, 0x1a, 0x50, 0x2f,
    0x20, 0x5c, 0x62, 0x72, 0x69, 0x65, 0x66, 0x20, 0x53, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x20,
    0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6f,
    0x69, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2c, 0x20,
    0x75, 0x73, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x6f, 0x72, 0x73, 0x69, 0x6f, 0x6e,
    0x61, 0x6c, 0x0a, 0x2f, 0x20, 0x66, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x0a, 0x0a,
    0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x03, 0x04, 0x12, 0x03, 0x22, 0x04, 0x0c, 0x0a,
    0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x03, 0x05, 0x12, 0x03, 0x22, 0x0d, 0x13, 0x0a,
    0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x03, 0x01, 0x12, 0x03, 0x22, 0x14, 0x22, 0x0a,
    0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x03, 0x03, 0x12, 0x03, 0x22, 0x25, 0x26, 0x0a,
    0x58, 0x0a, 0x06, 0x04, 0x00, 0x03, 0x00, 0x02, 0x04, 0x12, 0x03, 0x25, 0x04, 0x19, 0x1a, 0x49,
    0x2f, 0x20, 0x5c, 0x62, 0x72, 0x69, 0x65, 0x66, 0x20, 0x54, 0x6f, 0x72, 0x73, 0x69, 0x6f, 0x6e,
    0x61, 0x6c, 0x20, 0x66, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x66, 0x6f,
    0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76,
    0x65, 0x20, 0x74, 0x6f, 0x20, 0x4f, 0x44, 0x45, 0x20, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73,
    0x20, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03,
    0x00, 0x02, 0x04, 0x04, 0x12, 0x03, 0x25, 0x04, 0x0c, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03,
    0x00, 0x02, 0x04, 0x06, 0x12, 0x03, 0x25, 0x0d, 0x10, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03,
    0x00, 0x02, 0x04, 0x01, 0x12, 0x03, 0x25, 0x11, 0x14, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03,
    0x00, 0x02, 0x04, 0x03, 0x12, 0x03, 0x25, 0x17, 0x18, 0x0a, 0x46, 0x0a, 0x04, 0x04, 0x00, 0x02,
    0x00, 0x12, 0x03, 0x29, 0x02, 0x19, 0x1a, 0x39, 0x2f, 0x20, 0x5c, 0x62, 0x72, 0x69, 0x65, 0x66,
    0x20, 0x43, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20,
    0x66, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x72, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x5b, 0x30, 0x2e, 0x2e, 0x31, 0x5d, 0x2e,
    0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x04, 0x12, 0x03, 0x29, 0x02, 0x0a, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x05, 0x12, 0x03, 0x29, 0x0b, 0x11, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x29, 0x12, 0x14, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x00, 0x03, 0x12, 0x03, 0x29, 0x17, 0x18, 0x0a, 0x4d, 0x0a, 0x04, 0x04, 0x00, 0x02,
    0x01, 0x12, 0x03, 0x2c, 0x02, 0x1a, 0x1a, 0x40, 0x2f, 0x20, 0x5c, 0x62, 0x72, 0x69, 0x65, 0x66,
    0x20, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x20, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69,
    0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x66, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20,
    0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x6f, 0x66, 0x20,
    0x5b, 0x30, 0x2e, 0x2e, 0x31, 0x5d, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01,
    0x04, 0x12, 0x03, 0x2c, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x05, 0x12,
    0x03, 0x2c, 0x0b, 0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x2c,
    0x12, 0x15, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x03, 0x12, 0x03, 0x2c, 0x18, 0x19,
    0x0a, 0x4f, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x02, 0x12, 0x03, 0x2f, 0x02, 0x1e, 0x1a, 0x42, 0x2f,
    0x20, 0x5c, 0x62, 0x72, 0x69, 0x65, 0x66, 0x20, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
    0x6e, 0x20, 0x6f, 0x66, 0x20, 0x6d, 0x75, 0x31, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
    0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20,
    0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e,
    0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x04, 0x12, 0x03, 0x2f, 0x02, 0x0a, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x06, 0x12, 0x03, 0x2f, 0x0b, 0x13, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x02, 0x01, 0x12, 0x03, 0x2f, 0x14, 0x19, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x02, 0x03, 0x12, 0x03, 0x2f, 0x1c, 0x1d, 0x0a, 0x70, 0x0a, 0x04, 0x04, 0x00, 0x02,
    0x03, 0x12, 0x03, 0x33, 0x02, 0x1c, 0x1a, 0x63, 0x2f, 0x20, 0x5c, 0x62, 0x72, 0x69, 0x65, 0x66,
    0x20, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x20, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74,
    0x20, 0x73, 0x6c, 0x69, 0x70, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20,
    0x31, 0x20, 0x69, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6c,
    0x6f, 0x63, 0x61, 0x6c, 0x20, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2c, 0x20, 0x62, 0x65, 0x74, 0x77,
    0x65, 0x65, 0x6e, 0x0a, 0x2f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x20,
    0x6f, 0x66, 0x20, 0x5b, 0x30, 0x2e, 0x2e, 0x31, 0x5d, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x03, 0x04, 0x12, 0x03, 0x33, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02,
    0x03, 0x05, 0x12, 0x03, 0x33, 0x0b, 0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x03, 0x01,
    0x12, 0x03, 0x33, 0x12, 0x17, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x03, 0x03, 0x12, 0x03,
    0x33, 0x1a, 0x1b, 0x0a, 0x70, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x04, 0x12, 0x03, 0x37, 0x02, 0x1c,
    0x1a, 0x63, 0x2f, 0x20, 0x5c, 0x62, 0x72, 0x69, 0x65, 0x66, 0x20, 0x46, 0x6f, 0x72, 0x63, 0x65,
    0x20, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x6c, 0x69, 0x70, 0x20,
    0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x32, 0x20, 0x69, 0x6e, 0x20, 0x63,
    0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x66,
    0x72, 0x61, 0x6d, 0x65, 0x2c, 0x20, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x0a, 0x2f, 0x20,
    0x74, 0x68, 0x65, 0x20, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x5b, 0x30, 0x2e,
    0x2e, 0x31, 0x5d, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x04, 0x04, 0x12, 0x03,
    0x37, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x04, 0x05, 0x12, 0x03, 0x37, 0x0b,
    0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x04, 0x01, 0x12, 0x03, 0x37, 0x12, 0x17, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x04, 0x03, 0x12, 0x03, 0x37, 0x1a, 0x1b, 0x0a, 0x2a, 0x0a,
    0x04, 0x04, 0x00, 0x02, 0x05, 0x12, 0x03, 0x3a, 0x02, 0x23, 0x1a, 0x1d, 0x2f, 0x20, 0x5c, 0x62,
    0x72, 0x69, 0x65, 0x66, 0x20, 0x54, 0x6f, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x66,
    0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02,
    0x05, 0x04, 0x12, 0x03, 0x3a, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x05, 0x06,
    0x12, 0x03, 0x3a, 0x0b, 0x14, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x05, 0x01, 0x12, 0x03,
    0x3a, 0x15, 0x1e, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x05, 0x03, 0x12, 0x03, 0x3a, 0x21,
    0x22,
];

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
