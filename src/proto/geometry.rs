// This file is generated. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(Clone,Default)]
pub struct Geometry {
    // message fields
    field_type: ::std::option::Option<Geometry_Type>,
    field_box: ::protobuf::SingularPtrField<super::boxgeom::BoxGeom>,
    cylinder: ::protobuf::SingularPtrField<super::cylindergeom::CylinderGeom>,
    plane: ::protobuf::SingularPtrField<super::planegeom::PlaneGeom>,
    sphere: ::protobuf::SingularPtrField<super::spheregeom::SphereGeom>,
    image: ::protobuf::SingularPtrField<super::imagegeom::ImageGeom>,
    heightmap: ::protobuf::SingularPtrField<super::heightmapgeom::HeightmapGeom>,
    mesh: ::protobuf::SingularPtrField<super::meshgeom::MeshGeom>,
    points: ::protobuf::RepeatedField<super::vector3d::Vector3d>,
    polyline: ::protobuf::RepeatedField<super::polylinegeom::Polyline>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for Geometry {}

impl Geometry {
    pub fn new() -> Geometry {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static Geometry {
        static mut instance: ::protobuf::lazy::Lazy<Geometry> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Geometry,
        };
        unsafe {
            instance.get(|| {
                Geometry {
                    field_type: ::std::option::Option::None,
                    field_box: ::protobuf::SingularPtrField::none(),
                    cylinder: ::protobuf::SingularPtrField::none(),
                    plane: ::protobuf::SingularPtrField::none(),
                    sphere: ::protobuf::SingularPtrField::none(),
                    image: ::protobuf::SingularPtrField::none(),
                    heightmap: ::protobuf::SingularPtrField::none(),
                    mesh: ::protobuf::SingularPtrField::none(),
                    points: ::protobuf::RepeatedField::new(),
                    polyline: ::protobuf::RepeatedField::new(),
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // optional .gazebo.msgs.Geometry.Type type = 1;

    pub fn clear_field_type(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_field_type(&self) -> bool {
        self.field_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: Geometry_Type) {
        self.field_type = ::std::option::Option::Some(v);
    }

    pub fn get_field_type(&self) -> Geometry_Type {
        self.field_type.unwrap_or(Geometry_Type::BOX)
    }

    // optional .gazebo.msgs.BoxGeom box = 2;

    pub fn clear_field_box(&mut self) {
        self.field_box.clear();
    }

    pub fn has_field_box(&self) -> bool {
        self.field_box.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_box(&mut self, v: super::boxgeom::BoxGeom) {
        self.field_box = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_box(&mut self) -> &mut super::boxgeom::BoxGeom {
        if self.field_box.is_none() {
            self.field_box.set_default();
        };
        self.field_box.as_mut().unwrap()
    }

    // Take field
    pub fn take_field_box(&mut self) -> super::boxgeom::BoxGeom {
        self.field_box.take().unwrap_or_else(|| super::boxgeom::BoxGeom::new())
    }

    pub fn get_field_box(&self) -> &super::boxgeom::BoxGeom {
        self.field_box.as_ref().unwrap_or_else(|| super::boxgeom::BoxGeom::default_instance())
    }

    // optional .gazebo.msgs.CylinderGeom cylinder = 3;

    pub fn clear_cylinder(&mut self) {
        self.cylinder.clear();
    }

    pub fn has_cylinder(&self) -> bool {
        self.cylinder.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cylinder(&mut self, v: super::cylindergeom::CylinderGeom) {
        self.cylinder = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cylinder(&mut self) -> &mut super::cylindergeom::CylinderGeom {
        if self.cylinder.is_none() {
            self.cylinder.set_default();
        };
        self.cylinder.as_mut().unwrap()
    }

    // Take field
    pub fn take_cylinder(&mut self) -> super::cylindergeom::CylinderGeom {
        self.cylinder.take().unwrap_or_else(|| super::cylindergeom::CylinderGeom::new())
    }

    pub fn get_cylinder(&self) -> &super::cylindergeom::CylinderGeom {
        self.cylinder.as_ref().unwrap_or_else(|| super::cylindergeom::CylinderGeom::default_instance())
    }

    // optional .gazebo.msgs.PlaneGeom plane = 4;

    pub fn clear_plane(&mut self) {
        self.plane.clear();
    }

    pub fn has_plane(&self) -> bool {
        self.plane.is_some()
    }

    // Param is passed by value, moved
    pub fn set_plane(&mut self, v: super::planegeom::PlaneGeom) {
        self.plane = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_plane(&mut self) -> &mut super::planegeom::PlaneGeom {
        if self.plane.is_none() {
            self.plane.set_default();
        };
        self.plane.as_mut().unwrap()
    }

    // Take field
    pub fn take_plane(&mut self) -> super::planegeom::PlaneGeom {
        self.plane.take().unwrap_or_else(|| super::planegeom::PlaneGeom::new())
    }

    pub fn get_plane(&self) -> &super::planegeom::PlaneGeom {
        self.plane.as_ref().unwrap_or_else(|| super::planegeom::PlaneGeom::default_instance())
    }

    // optional .gazebo.msgs.SphereGeom sphere = 5;

    pub fn clear_sphere(&mut self) {
        self.sphere.clear();
    }

    pub fn has_sphere(&self) -> bool {
        self.sphere.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sphere(&mut self, v: super::spheregeom::SphereGeom) {
        self.sphere = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sphere(&mut self) -> &mut super::spheregeom::SphereGeom {
        if self.sphere.is_none() {
            self.sphere.set_default();
        };
        self.sphere.as_mut().unwrap()
    }

    // Take field
    pub fn take_sphere(&mut self) -> super::spheregeom::SphereGeom {
        self.sphere.take().unwrap_or_else(|| super::spheregeom::SphereGeom::new())
    }

    pub fn get_sphere(&self) -> &super::spheregeom::SphereGeom {
        self.sphere.as_ref().unwrap_or_else(|| super::spheregeom::SphereGeom::default_instance())
    }

    // optional .gazebo.msgs.ImageGeom image = 6;

    pub fn clear_image(&mut self) {
        self.image.clear();
    }

    pub fn has_image(&self) -> bool {
        self.image.is_some()
    }

    // Param is passed by value, moved
    pub fn set_image(&mut self, v: super::imagegeom::ImageGeom) {
        self.image = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_image(&mut self) -> &mut super::imagegeom::ImageGeom {
        if self.image.is_none() {
            self.image.set_default();
        };
        self.image.as_mut().unwrap()
    }

    // Take field
    pub fn take_image(&mut self) -> super::imagegeom::ImageGeom {
        self.image.take().unwrap_or_else(|| super::imagegeom::ImageGeom::new())
    }

    pub fn get_image(&self) -> &super::imagegeom::ImageGeom {
        self.image.as_ref().unwrap_or_else(|| super::imagegeom::ImageGeom::default_instance())
    }

    // optional .gazebo.msgs.HeightmapGeom heightmap = 7;

    pub fn clear_heightmap(&mut self) {
        self.heightmap.clear();
    }

    pub fn has_heightmap(&self) -> bool {
        self.heightmap.is_some()
    }

    // Param is passed by value, moved
    pub fn set_heightmap(&mut self, v: super::heightmapgeom::HeightmapGeom) {
        self.heightmap = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_heightmap(&mut self) -> &mut super::heightmapgeom::HeightmapGeom {
        if self.heightmap.is_none() {
            self.heightmap.set_default();
        };
        self.heightmap.as_mut().unwrap()
    }

    // Take field
    pub fn take_heightmap(&mut self) -> super::heightmapgeom::HeightmapGeom {
        self.heightmap.take().unwrap_or_else(|| super::heightmapgeom::HeightmapGeom::new())
    }

    pub fn get_heightmap(&self) -> &super::heightmapgeom::HeightmapGeom {
        self.heightmap.as_ref().unwrap_or_else(|| super::heightmapgeom::HeightmapGeom::default_instance())
    }

    // optional .gazebo.msgs.MeshGeom mesh = 8;

    pub fn clear_mesh(&mut self) {
        self.mesh.clear();
    }

    pub fn has_mesh(&self) -> bool {
        self.mesh.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mesh(&mut self, v: super::meshgeom::MeshGeom) {
        self.mesh = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mesh(&mut self) -> &mut super::meshgeom::MeshGeom {
        if self.mesh.is_none() {
            self.mesh.set_default();
        };
        self.mesh.as_mut().unwrap()
    }

    // Take field
    pub fn take_mesh(&mut self) -> super::meshgeom::MeshGeom {
        self.mesh.take().unwrap_or_else(|| super::meshgeom::MeshGeom::new())
    }

    pub fn get_mesh(&self) -> &super::meshgeom::MeshGeom {
        self.mesh.as_ref().unwrap_or_else(|| super::meshgeom::MeshGeom::default_instance())
    }

    // repeated .gazebo.msgs.Vector3d points = 9;

    pub fn clear_points(&mut self) {
        self.points.clear();
    }

    // Param is passed by value, moved
    pub fn set_points(&mut self, v: ::protobuf::RepeatedField<super::vector3d::Vector3d>) {
        self.points = v;
    }

    // Mutable pointer to the field.
    pub fn mut_points(&mut self) -> &mut ::protobuf::RepeatedField<super::vector3d::Vector3d> {
        &mut self.points
    }

    // Take field
    pub fn take_points(&mut self) -> ::protobuf::RepeatedField<super::vector3d::Vector3d> {
        ::std::mem::replace(&mut self.points, ::protobuf::RepeatedField::new())
    }

    pub fn get_points(&self) -> &[super::vector3d::Vector3d] {
        &self.points
    }

    // repeated .gazebo.msgs.Polyline polyline = 10;

    pub fn clear_polyline(&mut self) {
        self.polyline.clear();
    }

    // Param is passed by value, moved
    pub fn set_polyline(&mut self, v: ::protobuf::RepeatedField<super::polylinegeom::Polyline>) {
        self.polyline = v;
    }

    // Mutable pointer to the field.
    pub fn mut_polyline(&mut self) -> &mut ::protobuf::RepeatedField<super::polylinegeom::Polyline> {
        &mut self.polyline
    }

    // Take field
    pub fn take_polyline(&mut self) -> ::protobuf::RepeatedField<super::polylinegeom::Polyline> {
        ::std::mem::replace(&mut self.polyline, ::protobuf::RepeatedField::new())
    }

    pub fn get_polyline(&self) -> &[super::polylinegeom::Polyline] {
        &self.polyline
    }
}

impl ::protobuf::Message for Geometry {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_enum());
                    self.field_type = ::std::option::Option::Some(tmp);
                },
                2 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.field_box));
                },
                3 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.cylinder));
                },
                4 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.plane));
                },
                5 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.sphere));
                },
                6 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.image));
                },
                7 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.heightmap));
                },
                8 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.mesh));
                },
                9 => {
                    try!(::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.points));
                },
                10 => {
                    try!(::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.polyline));
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.field_type {
            my_size += ::protobuf::rt::enum_size(1, *value);
        };
        for value in &self.field_box {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.cylinder {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.plane {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.sphere {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.image {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.heightmap {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.mesh {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.points {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.polyline {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.field_type {
            try!(os.write_enum(1, v.value()));
        };
        if let Some(v) = self.field_box.as_ref() {
            try!(os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.cylinder.as_ref() {
            try!(os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.plane.as_ref() {
            try!(os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.sphere.as_ref() {
            try!(os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.image.as_ref() {
            try!(os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.heightmap.as_ref() {
            try!(os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.mesh.as_ref() {
            try!(os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        for v in &self.points {
            try!(os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        for v in &self.polyline {
            try!(os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<Geometry>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for Geometry {
    fn new() -> Geometry {
        Geometry::new()
    }

    fn descriptor_static(_: ::std::option::Option<Geometry>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_enum_accessor(
                    "type",
                    Geometry::has_field_type,
                    Geometry::get_field_type,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "box",
                    Geometry::has_field_box,
                    Geometry::get_field_box,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "cylinder",
                    Geometry::has_cylinder,
                    Geometry::get_cylinder,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "plane",
                    Geometry::has_plane,
                    Geometry::get_plane,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "sphere",
                    Geometry::has_sphere,
                    Geometry::get_sphere,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "image",
                    Geometry::has_image,
                    Geometry::get_image,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "heightmap",
                    Geometry::has_heightmap,
                    Geometry::get_heightmap,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "mesh",
                    Geometry::has_mesh,
                    Geometry::get_mesh,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_message_accessor(
                    "points",
                    Geometry::get_points,
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_message_accessor(
                    "polyline",
                    Geometry::get_polyline,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Geometry>(
                    "Geometry",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for Geometry {
    fn clear(&mut self) {
        self.clear_field_type();
        self.clear_field_box();
        self.clear_cylinder();
        self.clear_plane();
        self.clear_sphere();
        self.clear_image();
        self.clear_heightmap();
        self.clear_mesh();
        self.clear_points();
        self.clear_polyline();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for Geometry {
    fn eq(&self, other: &Geometry) -> bool {
        self.field_type == other.field_type &&
        self.field_box == other.field_box &&
        self.cylinder == other.cylinder &&
        self.plane == other.plane &&
        self.sphere == other.sphere &&
        self.image == other.image &&
        self.heightmap == other.heightmap &&
        self.mesh == other.mesh &&
        self.points == other.points &&
        self.polyline == other.polyline &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for Geometry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Geometry_Type {
    BOX = 1,
    CYLINDER = 2,
    SPHERE = 3,
    PLANE = 4,
    IMAGE = 5,
    HEIGHTMAP = 6,
    MESH = 7,
    TRIANGLE_FAN = 8,
    LINE_STRIP = 9,
    POLYLINE = 10,
    EMPTY = 11,
}

impl ::protobuf::ProtobufEnum for Geometry_Type {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Geometry_Type> {
        match value {
            1 => ::std::option::Option::Some(Geometry_Type::BOX),
            2 => ::std::option::Option::Some(Geometry_Type::CYLINDER),
            3 => ::std::option::Option::Some(Geometry_Type::SPHERE),
            4 => ::std::option::Option::Some(Geometry_Type::PLANE),
            5 => ::std::option::Option::Some(Geometry_Type::IMAGE),
            6 => ::std::option::Option::Some(Geometry_Type::HEIGHTMAP),
            7 => ::std::option::Option::Some(Geometry_Type::MESH),
            8 => ::std::option::Option::Some(Geometry_Type::TRIANGLE_FAN),
            9 => ::std::option::Option::Some(Geometry_Type::LINE_STRIP),
            10 => ::std::option::Option::Some(Geometry_Type::POLYLINE),
            11 => ::std::option::Option::Some(Geometry_Type::EMPTY),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Geometry_Type] = &[
            Geometry_Type::BOX,
            Geometry_Type::CYLINDER,
            Geometry_Type::SPHERE,
            Geometry_Type::PLANE,
            Geometry_Type::IMAGE,
            Geometry_Type::HEIGHTMAP,
            Geometry_Type::MESH,
            Geometry_Type::TRIANGLE_FAN,
            Geometry_Type::LINE_STRIP,
            Geometry_Type::POLYLINE,
            Geometry_Type::EMPTY,
        ];
        values
    }

    fn enum_descriptor_static(_: Option<Geometry_Type>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("Geometry_Type", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Geometry_Type {
}

static file_descriptor_proto_data: &'static [u8] = &[
    0x0a, 0x0e, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
    0x12, 0x0b, 0x67, 0x61, 0x7a, 0x65, 0x62, 0x6f, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x1a, 0x0d, 0x62,
    0x6f, 0x78, 0x67, 0x65, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x63, 0x79,
    0x6c, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x67, 0x65, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
    0x1a, 0x10, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x67, 0x65, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
    0x74, 0x6f, 0x1a, 0x0f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x67, 0x65, 0x6f, 0x6d, 0x2e, 0x70, 0x72,
    0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x67, 0x65, 0x6f, 0x6d, 0x2e, 0x70,
    0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x6d, 0x61, 0x70, 0x67,
    0x65, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x6d, 0x65, 0x73, 0x68, 0x67,
    0x65, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x76, 0x65, 0x63, 0x74, 0x6f,
    0x72, 0x33, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x70, 0x6f, 0x6c, 0x79, 0x6c,
    0x69, 0x6e, 0x65, 0x67, 0x65, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb5, 0x04,
    0x0a, 0x08, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79,
    0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x61, 0x7a, 0x65, 0x62,
    0x6f, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e,
    0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x62, 0x6f, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
    0x0b, 0x32, 0x14, 0x2e, 0x67, 0x61, 0x7a, 0x65, 0x62, 0x6f, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e,
    0x42, 0x6f, 0x78, 0x47, 0x65, 0x6f, 0x6d, 0x12, 0x2b, 0x0a, 0x08, 0x63, 0x79, 0x6c, 0x69, 0x6e,
    0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x61, 0x7a, 0x65,
    0x62, 0x6f, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x43, 0x79, 0x6c, 0x69, 0x6e, 0x64, 0x65, 0x72,
    0x47, 0x65, 0x6f, 0x6d, 0x12, 0x25, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x18, 0x04, 0x20,
    0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x61, 0x7a, 0x65, 0x62, 0x6f, 0x2e, 0x6d, 0x73, 0x67,
    0x73, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x47, 0x65, 0x6f, 0x6d, 0x12, 0x27, 0x0a, 0x06, 0x73,
    0x70, 0x68, 0x65, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x61,
    0x7a, 0x65, 0x62, 0x6f, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65,
    0x47, 0x65, 0x6f, 0x6d, 0x12, 0x25, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20,
    0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x61, 0x7a, 0x65, 0x62, 0x6f, 0x2e, 0x6d, 0x73, 0x67,
    0x73, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x47, 0x65, 0x6f, 0x6d, 0x12, 0x2d, 0x0a, 0x09, 0x68,
    0x65, 0x69, 0x67, 0x68, 0x74, 0x6d, 0x61, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
    0x2e, 0x67, 0x61, 0x7a, 0x65, 0x62, 0x6f, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x48, 0x65, 0x69,
    0x67, 0x68, 0x74, 0x6d, 0x61, 0x70, 0x47, 0x65, 0x6f, 0x6d, 0x12, 0x23, 0x0a, 0x04, 0x6d, 0x65,
    0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x61, 0x7a, 0x65, 0x62,
    0x6f, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x68, 0x47, 0x65, 0x6f, 0x6d, 0x12,
    0x25, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
    0x15, 0x2e, 0x67, 0x61, 0x7a, 0x65, 0x62, 0x6f, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x56, 0x65,
    0x63, 0x74, 0x6f, 0x72, 0x33, 0x64, 0x12, 0x27, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x79, 0x6c, 0x69,
    0x6e, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x61, 0x7a, 0x65, 0x62,
    0x6f, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x79, 0x6c, 0x69, 0x6e, 0x65, 0x22,
    0x93, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x4f, 0x58, 0x10,
    0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x59, 0x4c, 0x49, 0x4e, 0x44, 0x45, 0x52, 0x10, 0x02, 0x12,
    0x0a, 0x0a, 0x06, 0x53, 0x50, 0x48, 0x45, 0x52, 0x45, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x50,
    0x4c, 0x41, 0x4e, 0x45, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10,
    0x05, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x45, 0x49, 0x47, 0x48, 0x54, 0x4d, 0x41, 0x50, 0x10, 0x06,
    0x12, 0x08, 0x0a, 0x04, 0x4d, 0x45, 0x53, 0x48, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x52,
    0x49, 0x41, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x46, 0x41, 0x4e, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a,
    0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x50, 0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08,
    0x50, 0x4f, 0x4c, 0x59, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x0a, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4d,
    0x50, 0x54, 0x59, 0x10, 0x0b, 0x4a, 0xe0, 0x0a, 0x0a, 0x06, 0x12, 0x04, 0x00, 0x00, 0x2d, 0x01,
    0x0a, 0x08, 0x0a, 0x01, 0x02, 0x12, 0x03, 0x00, 0x08, 0x13, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x00,
    0x12, 0x03, 0x07, 0x07, 0x16, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x01, 0x12, 0x03, 0x08, 0x07, 0x1b,
    0x0a, 0x09, 0x0a, 0x02, 0x03, 0x02, 0x12, 0x03, 0x09, 0x07, 0x19, 0x0a, 0x09, 0x0a, 0x02, 0x03,
    0x03, 0x12, 0x03, 0x0a, 0x07, 0x18, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x04, 0x12, 0x03, 0x0b, 0x07,
    0x18, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x05, 0x12, 0x03, 0x0c, 0x07, 0x1c, 0x0a, 0x09, 0x0a, 0x02,
    0x03, 0x06, 0x12, 0x03, 0x0d, 0x07, 0x17, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x07, 0x12, 0x03, 0x0e,
    0x07, 0x17, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x08, 0x12, 0x03, 0x0f, 0x07, 0x1b, 0x0a, 0x0a, 0x0a,
    0x02, 0x04, 0x00, 0x12, 0x04, 0x11, 0x00, 0x2d, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x00, 0x01,
    0x12, 0x03, 0x11, 0x08, 0x10, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x00, 0x04, 0x00, 0x12, 0x04, 0x13,
    0x02, 0x20, 0x03, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x04, 0x00, 0x01, 0x12, 0x03, 0x13, 0x07,
    0x0b, 0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02, 0x00, 0x12, 0x03, 0x15, 0x04, 0x15,
    0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x15, 0x04, 0x07,
    0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x00, 0x02, 0x12, 0x03, 0x15, 0x13, 0x14,
    0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02, 0x01, 0x12, 0x03, 0x16, 0x04, 0x15, 0x0a,
    0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x16, 0x04, 0x0c, 0x0a,
    0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x01, 0x02, 0x12, 0x03, 0x16, 0x13, 0x14, 0x0a,
    0x0d, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02, 0x02, 0x12, 0x03, 0x17, 0x04, 0x15, 0x0a, 0x0e,
    0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x02, 0x01, 0x12, 0x03, 0x17, 0x04, 0x0a, 0x0a, 0x0e,
    0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x02, 0x02, 0x12, 0x03, 0x17, 0x13, 0x14, 0x0a, 0x0d,
    0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02, 0x03, 0x12, 0x03, 0x18, 0x04, 0x15, 0x0a, 0x0e, 0x0a,
    0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x03, 0x01, 0x12, 0x03, 0x18, 0x04, 0x09, 0x0a, 0x0e, 0x0a,
    0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x03, 0x02, 0x12, 0x03, 0x18, 0x13, 0x14, 0x0a, 0x0d, 0x0a,
    0x06, 0x04, 0x00, 0x04, 0x00, 0x02, 0x04, 0x12, 0x03, 0x19, 0x04, 0x15, 0x0a, 0x0e, 0x0a, 0x07,
    0x04, 0x00, 0x04, 0x00, 0x02, 0x04, 0x01, 0x12, 0x03, 0x19, 0x04, 0x09, 0x0a, 0x0e, 0x0a, 0x07,
    0x04, 0x00, 0x04, 0x00, 0x02, 0x04, 0x02, 0x12, 0x03, 0x19, 0x13, 0x14, 0x0a, 0x0d, 0x0a, 0x06,
    0x04, 0x00, 0x04, 0x00, 0x02, 0x05, 0x12, 0x03, 0x1a, 0x04, 0x15, 0x0a, 0x0e, 0x0a, 0x07, 0x04,
    0x00, 0x04, 0x00, 0x02, 0x05, 0x01, 0x12, 0x03, 0x1a, 0x04, 0x0d, 0x0a, 0x0e, 0x0a, 0x07, 0x04,
    0x00, 0x04, 0x00, 0x02, 0x05, 0x02, 0x12, 0x03, 0x1a, 0x13, 0x14, 0x0a, 0x0d, 0x0a, 0x06, 0x04,
    0x00, 0x04, 0x00, 0x02, 0x06, 0x12, 0x03, 0x1b, 0x04, 0x15, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00,
    0x04, 0x00, 0x02, 0x06, 0x01, 0x12, 0x03, 0x1b, 0x04, 0x08, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00,
    0x04, 0x00, 0x02, 0x06, 0x02, 0x12, 0x03, 0x1b, 0x13, 0x14, 0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x00,
    0x04, 0x00, 0x02, 0x07, 0x12, 0x03, 0x1c, 0x04, 0x15, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04,
    0x00, 0x02, 0x07, 0x01, 0x12, 0x03, 0x1c, 0x04, 0x10, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04,
    0x00, 0x02, 0x07, 0x02, 0x12, 0x03, 0x1c, 0x13, 0x14, 0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x00, 0x04,
    0x00, 0x02, 0x08, 0x12, 0x03, 0x1d, 0x04, 0x15, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00,
    0x02, 0x08, 0x01, 0x12, 0x03, 0x1d, 0x04, 0x0e, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00,
    0x02, 0x08, 0x02, 0x12, 0x03, 0x1d, 0x13, 0x14, 0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x00,
    0x02, 0x09, 0x12, 0x03, 0x1e, 0x04, 0x16, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02,
    0x09, 0x01, 0x12, 0x03, 0x1e, 0x04, 0x0c, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02,
    0x09, 0x02, 0x12, 0x03, 0x1e, 0x13, 0x15, 0x0a, 0x0d, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02,
    0x0a, 0x12, 0x03, 0x1f, 0x04, 0x16, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x0a,
    0x01, 0x12, 0x03, 0x1f, 0x04, 0x09, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x0a,
    0x02, 0x12, 0x03, 0x1f, 0x13, 0x15, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x00, 0x12, 0x03,
    0x22, 0x02, 0x28, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x04, 0x12, 0x03, 0x22, 0x02,
    0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x06, 0x12, 0x03, 0x22, 0x0b, 0x0f, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x22, 0x10, 0x14, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x00, 0x03, 0x12, 0x03, 0x22, 0x26, 0x27, 0x0a, 0x0b, 0x0a, 0x04, 0x04,
    0x00, 0x02, 0x01, 0x12, 0x03, 0x23, 0x02, 0x28, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01,
    0x04, 0x12, 0x03, 0x23, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x06, 0x12,
    0x03, 0x23, 0x0b, 0x12, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x23,
    0x13, 0x16, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x03, 0x12, 0x03, 0x23, 0x26, 0x27,
    0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x02, 0x12, 0x03, 0x24, 0x02, 0x28, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x02, 0x04, 0x12, 0x03, 0x24, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x02, 0x06, 0x12, 0x03, 0x24, 0x0b, 0x17, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02,
    0x02, 0x01, 0x12, 0x03, 0x24, 0x18, 0x20, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x03,
    0x12, 0x03, 0x24, 0x26, 0x27, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x03, 0x12, 0x03, 0x25,
    0x02, 0x28, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x03, 0x04, 0x12, 0x03, 0x25, 0x02, 0x0a,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x03, 0x06, 0x12, 0x03, 0x25, 0x0b, 0x14, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x00, 0x02, 0x03, 0x01, 0x12, 0x03, 0x25, 0x15, 0x1a, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x00, 0x02, 0x03, 0x03, 0x12, 0x03, 0x25, 0x26, 0x27, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00,
    0x02, 0x04, 0x12, 0x03, 0x26, 0x02, 0x28, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x04, 0x04,
    0x12, 0x03, 0x26, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x04, 0x06, 0x12, 0x03,
    0x26, 0x0b, 0x15, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x04, 0x01, 0x12, 0x03, 0x26, 0x16,
    0x1c, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x04, 0x03, 0x12, 0x03, 0x26, 0x26, 0x27, 0x0a,
    0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x05, 0x12, 0x03, 0x27, 0x02, 0x28, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x00, 0x02, 0x05, 0x04, 0x12, 0x03, 0x27, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00,
    0x02, 0x05, 0x06, 0x12, 0x03, 0x27, 0x0b, 0x14, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x05,
    0x01, 0x12, 0x03, 0x27, 0x15, 0x1a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x05, 0x03, 0x12,
    0x03, 0x27, 0x26, 0x27, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x06, 0x12, 0x03, 0x28, 0x02,
    0x28, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x06, 0x04, 0x12, 0x03, 0x28, 0x02, 0x0a, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x06, 0x06, 0x12, 0x03, 0x28, 0x0b, 0x18, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x06, 0x01, 0x12, 0x03, 0x28, 0x19, 0x22, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x06, 0x03, 0x12, 0x03, 0x28, 0x26, 0x27, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02,
    0x07, 0x12, 0x03, 0x29, 0x02, 0x28, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x07, 0x04, 0x12,
    0x03, 0x29, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x07, 0x06, 0x12, 0x03, 0x29,
    0x0b, 0x13, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x07, 0x01, 0x12, 0x03, 0x29, 0x19, 0x1d,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x07, 0x03, 0x12, 0x03, 0x29, 0x26, 0x27, 0x0a, 0x0b,
    0x0a, 0x04, 0x04, 0x00, 0x02, 0x08, 0x12, 0x03, 0x2b, 0x02, 0x28, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x08, 0x04, 0x12, 0x03, 0x2b, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02,
    0x08, 0x06, 0x12, 0x03, 0x2b, 0x0b, 0x13, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x08, 0x01,
    0x12, 0x03, 0x2b, 0x14, 0x1a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x08, 0x03, 0x12, 0x03,
    0x2b, 0x26, 0x27, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x09, 0x12, 0x03, 0x2c, 0x02, 0x29,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x09, 0x04, 0x12, 0x03, 0x2c, 0x02, 0x0a, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x00, 0x02, 0x09, 0x06, 0x12, 0x03, 0x2c, 0x0b, 0x13, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x00, 0x02, 0x09, 0x01, 0x12, 0x03, 0x2c, 0x14, 0x1c, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00,
    0x02, 0x09, 0x03, 0x12, 0x03, 0x2c, 0x26, 0x28,
];

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
