// This file is generated. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(Clone,Default)]
pub struct Visual {
    // message fields
    name: ::protobuf::SingularField<::std::string::String>,
    id: ::std::option::Option<u32>,
    parent_name: ::protobuf::SingularField<::std::string::String>,
    parent_id: ::std::option::Option<u32>,
    cast_shadows: ::std::option::Option<bool>,
    transparency: ::std::option::Option<f64>,
    laser_retro: ::std::option::Option<f64>,
    pose: ::protobuf::SingularPtrField<super::pose::Pose>,
    geometry: ::protobuf::SingularPtrField<super::geometry::Geometry>,
    material: ::protobuf::SingularPtrField<super::material::Material>,
    visible: ::std::option::Option<bool>,
    delete_me: ::std::option::Option<bool>,
    is_static: ::std::option::Option<bool>,
    plugin: ::protobuf::SingularPtrField<super::plugin::Plugin>,
    scale: ::protobuf::SingularPtrField<super::vector3d::Vector3d>,
    meta: ::protobuf::SingularPtrField<Visual_Meta>,
    field_type: ::std::option::Option<Visual_Type>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for Visual {}

impl Visual {
    pub fn new() -> Visual {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static Visual {
        static mut instance: ::protobuf::lazy::Lazy<Visual> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Visual,
        };
        unsafe {
            instance.get(|| {
                Visual {
                    name: ::protobuf::SingularField::none(),
                    id: ::std::option::Option::None,
                    parent_name: ::protobuf::SingularField::none(),
                    parent_id: ::std::option::Option::None,
                    cast_shadows: ::std::option::Option::None,
                    transparency: ::std::option::Option::None,
                    laser_retro: ::std::option::Option::None,
                    pose: ::protobuf::SingularPtrField::none(),
                    geometry: ::protobuf::SingularPtrField::none(),
                    material: ::protobuf::SingularPtrField::none(),
                    visible: ::std::option::Option::None,
                    delete_me: ::std::option::Option::None,
                    is_static: ::std::option::Option::None,
                    plugin: ::protobuf::SingularPtrField::none(),
                    scale: ::protobuf::SingularPtrField::none(),
                    meta: ::protobuf::SingularPtrField::none(),
                    field_type: ::std::option::Option::None,
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // required string name = 1;

    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name.set_default();
        };
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional uint32 id = 2;

    pub fn clear_id(&mut self) {
        self.id = ::std::option::Option::None;
    }

    pub fn has_id(&self) -> bool {
        self.id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u32) {
        self.id = ::std::option::Option::Some(v);
    }

    pub fn get_id(&self) -> u32 {
        self.id.unwrap_or(0)
    }

    // required string parent_name = 3;

    pub fn clear_parent_name(&mut self) {
        self.parent_name.clear();
    }

    pub fn has_parent_name(&self) -> bool {
        self.parent_name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_parent_name(&mut self, v: ::std::string::String) {
        self.parent_name = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent_name(&mut self) -> &mut ::std::string::String {
        if self.parent_name.is_none() {
            self.parent_name.set_default();
        };
        self.parent_name.as_mut().unwrap()
    }

    // Take field
    pub fn take_parent_name(&mut self) -> ::std::string::String {
        self.parent_name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    pub fn get_parent_name(&self) -> &str {
        match self.parent_name.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }

    // optional uint32 parent_id = 4;

    pub fn clear_parent_id(&mut self) {
        self.parent_id = ::std::option::Option::None;
    }

    pub fn has_parent_id(&self) -> bool {
        self.parent_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_parent_id(&mut self, v: u32) {
        self.parent_id = ::std::option::Option::Some(v);
    }

    pub fn get_parent_id(&self) -> u32 {
        self.parent_id.unwrap_or(0)
    }

    // optional bool cast_shadows = 5;

    pub fn clear_cast_shadows(&mut self) {
        self.cast_shadows = ::std::option::Option::None;
    }

    pub fn has_cast_shadows(&self) -> bool {
        self.cast_shadows.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cast_shadows(&mut self, v: bool) {
        self.cast_shadows = ::std::option::Option::Some(v);
    }

    pub fn get_cast_shadows(&self) -> bool {
        self.cast_shadows.unwrap_or(false)
    }

    // optional double transparency = 6;

    pub fn clear_transparency(&mut self) {
        self.transparency = ::std::option::Option::None;
    }

    pub fn has_transparency(&self) -> bool {
        self.transparency.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transparency(&mut self, v: f64) {
        self.transparency = ::std::option::Option::Some(v);
    }

    pub fn get_transparency(&self) -> f64 {
        self.transparency.unwrap_or(0.)
    }

    // optional double laser_retro = 7;

    pub fn clear_laser_retro(&mut self) {
        self.laser_retro = ::std::option::Option::None;
    }

    pub fn has_laser_retro(&self) -> bool {
        self.laser_retro.is_some()
    }

    // Param is passed by value, moved
    pub fn set_laser_retro(&mut self, v: f64) {
        self.laser_retro = ::std::option::Option::Some(v);
    }

    pub fn get_laser_retro(&self) -> f64 {
        self.laser_retro.unwrap_or(0.)
    }

    // optional .gazebo.msgs.Pose pose = 8;

    pub fn clear_pose(&mut self) {
        self.pose.clear();
    }

    pub fn has_pose(&self) -> bool {
        self.pose.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pose(&mut self, v: super::pose::Pose) {
        self.pose = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pose(&mut self) -> &mut super::pose::Pose {
        if self.pose.is_none() {
            self.pose.set_default();
        };
        self.pose.as_mut().unwrap()
    }

    // Take field
    pub fn take_pose(&mut self) -> super::pose::Pose {
        self.pose.take().unwrap_or_else(|| super::pose::Pose::new())
    }

    pub fn get_pose(&self) -> &super::pose::Pose {
        self.pose.as_ref().unwrap_or_else(|| super::pose::Pose::default_instance())
    }

    // optional .gazebo.msgs.Geometry geometry = 9;

    pub fn clear_geometry(&mut self) {
        self.geometry.clear();
    }

    pub fn has_geometry(&self) -> bool {
        self.geometry.is_some()
    }

    // Param is passed by value, moved
    pub fn set_geometry(&mut self, v: super::geometry::Geometry) {
        self.geometry = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_geometry(&mut self) -> &mut super::geometry::Geometry {
        if self.geometry.is_none() {
            self.geometry.set_default();
        };
        self.geometry.as_mut().unwrap()
    }

    // Take field
    pub fn take_geometry(&mut self) -> super::geometry::Geometry {
        self.geometry.take().unwrap_or_else(|| super::geometry::Geometry::new())
    }

    pub fn get_geometry(&self) -> &super::geometry::Geometry {
        self.geometry.as_ref().unwrap_or_else(|| super::geometry::Geometry::default_instance())
    }

    // optional .gazebo.msgs.Material material = 10;

    pub fn clear_material(&mut self) {
        self.material.clear();
    }

    pub fn has_material(&self) -> bool {
        self.material.is_some()
    }

    // Param is passed by value, moved
    pub fn set_material(&mut self, v: super::material::Material) {
        self.material = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_material(&mut self) -> &mut super::material::Material {
        if self.material.is_none() {
            self.material.set_default();
        };
        self.material.as_mut().unwrap()
    }

    // Take field
    pub fn take_material(&mut self) -> super::material::Material {
        self.material.take().unwrap_or_else(|| super::material::Material::new())
    }

    pub fn get_material(&self) -> &super::material::Material {
        self.material.as_ref().unwrap_or_else(|| super::material::Material::default_instance())
    }

    // optional bool visible = 11;

    pub fn clear_visible(&mut self) {
        self.visible = ::std::option::Option::None;
    }

    pub fn has_visible(&self) -> bool {
        self.visible.is_some()
    }

    // Param is passed by value, moved
    pub fn set_visible(&mut self, v: bool) {
        self.visible = ::std::option::Option::Some(v);
    }

    pub fn get_visible(&self) -> bool {
        self.visible.unwrap_or(false)
    }

    // optional bool delete_me = 12;

    pub fn clear_delete_me(&mut self) {
        self.delete_me = ::std::option::Option::None;
    }

    pub fn has_delete_me(&self) -> bool {
        self.delete_me.is_some()
    }

    // Param is passed by value, moved
    pub fn set_delete_me(&mut self, v: bool) {
        self.delete_me = ::std::option::Option::Some(v);
    }

    pub fn get_delete_me(&self) -> bool {
        self.delete_me.unwrap_or(false)
    }

    // optional bool is_static = 13;

    pub fn clear_is_static(&mut self) {
        self.is_static = ::std::option::Option::None;
    }

    pub fn has_is_static(&self) -> bool {
        self.is_static.is_some()
    }

    // Param is passed by value, moved
    pub fn set_is_static(&mut self, v: bool) {
        self.is_static = ::std::option::Option::Some(v);
    }

    pub fn get_is_static(&self) -> bool {
        self.is_static.unwrap_or(false)
    }

    // optional .gazebo.msgs.Plugin plugin = 14;

    pub fn clear_plugin(&mut self) {
        self.plugin.clear();
    }

    pub fn has_plugin(&self) -> bool {
        self.plugin.is_some()
    }

    // Param is passed by value, moved
    pub fn set_plugin(&mut self, v: super::plugin::Plugin) {
        self.plugin = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_plugin(&mut self) -> &mut super::plugin::Plugin {
        if self.plugin.is_none() {
            self.plugin.set_default();
        };
        self.plugin.as_mut().unwrap()
    }

    // Take field
    pub fn take_plugin(&mut self) -> super::plugin::Plugin {
        self.plugin.take().unwrap_or_else(|| super::plugin::Plugin::new())
    }

    pub fn get_plugin(&self) -> &super::plugin::Plugin {
        self.plugin.as_ref().unwrap_or_else(|| super::plugin::Plugin::default_instance())
    }

    // optional .gazebo.msgs.Vector3d scale = 15;

    pub fn clear_scale(&mut self) {
        self.scale.clear();
    }

    pub fn has_scale(&self) -> bool {
        self.scale.is_some()
    }

    // Param is passed by value, moved
    pub fn set_scale(&mut self, v: super::vector3d::Vector3d) {
        self.scale = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_scale(&mut self) -> &mut super::vector3d::Vector3d {
        if self.scale.is_none() {
            self.scale.set_default();
        };
        self.scale.as_mut().unwrap()
    }

    // Take field
    pub fn take_scale(&mut self) -> super::vector3d::Vector3d {
        self.scale.take().unwrap_or_else(|| super::vector3d::Vector3d::new())
    }

    pub fn get_scale(&self) -> &super::vector3d::Vector3d {
        self.scale.as_ref().unwrap_or_else(|| super::vector3d::Vector3d::default_instance())
    }

    // optional .gazebo.msgs.Visual.Meta meta = 16;

    pub fn clear_meta(&mut self) {
        self.meta.clear();
    }

    pub fn has_meta(&self) -> bool {
        self.meta.is_some()
    }

    // Param is passed by value, moved
    pub fn set_meta(&mut self, v: Visual_Meta) {
        self.meta = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_meta(&mut self) -> &mut Visual_Meta {
        if self.meta.is_none() {
            self.meta.set_default();
        };
        self.meta.as_mut().unwrap()
    }

    // Take field
    pub fn take_meta(&mut self) -> Visual_Meta {
        self.meta.take().unwrap_or_else(|| Visual_Meta::new())
    }

    pub fn get_meta(&self) -> &Visual_Meta {
        self.meta.as_ref().unwrap_or_else(|| Visual_Meta::default_instance())
    }

    // optional .gazebo.msgs.Visual.Type type = 17;

    pub fn clear_field_type(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_field_type(&self) -> bool {
        self.field_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: Visual_Type) {
        self.field_type = ::std::option::Option::Some(v);
    }

    pub fn get_field_type(&self) -> Visual_Type {
        self.field_type.unwrap_or(Visual_Type::ENTITY)
    }
}

impl ::protobuf::Message for Visual {
    fn is_initialized(&self) -> bool {
        if self.name.is_none() {
            return false;
        };
        if self.parent_name.is_none() {
            return false;
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    try!(::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.name));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_uint32());
                    self.id = ::std::option::Option::Some(tmp);
                },
                3 => {
                    try!(::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.parent_name));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_uint32());
                    self.parent_id = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_bool());
                    self.cast_shadows = ::std::option::Option::Some(tmp);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_double());
                    self.transparency = ::std::option::Option::Some(tmp);
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_double());
                    self.laser_retro = ::std::option::Option::Some(tmp);
                },
                8 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.pose));
                },
                9 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.geometry));
                },
                10 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.material));
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_bool());
                    self.visible = ::std::option::Option::Some(tmp);
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_bool());
                    self.delete_me = ::std::option::Option::Some(tmp);
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_bool());
                    self.is_static = ::std::option::Option::Some(tmp);
                },
                14 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.plugin));
                },
                15 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.scale));
                },
                16 => {
                    try!(::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.meta));
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_enum());
                    self.field_type = ::std::option::Option::Some(tmp);
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.name {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        for value in &self.id {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.parent_name {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        for value in &self.parent_id {
            my_size += ::protobuf::rt::value_size(4, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if self.cast_shadows.is_some() {
            my_size += 2;
        };
        if self.transparency.is_some() {
            my_size += 9;
        };
        if self.laser_retro.is_some() {
            my_size += 9;
        };
        for value in &self.pose {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.geometry {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.material {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.visible.is_some() {
            my_size += 2;
        };
        if self.delete_me.is_some() {
            my_size += 2;
        };
        if self.is_static.is_some() {
            my_size += 2;
        };
        for value in &self.plugin {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.scale {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.meta {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.field_type {
            my_size += ::protobuf::rt::enum_size(17, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.name.as_ref() {
            try!(os.write_string(1, &v));
        };
        if let Some(v) = self.id {
            try!(os.write_uint32(2, v));
        };
        if let Some(v) = self.parent_name.as_ref() {
            try!(os.write_string(3, &v));
        };
        if let Some(v) = self.parent_id {
            try!(os.write_uint32(4, v));
        };
        if let Some(v) = self.cast_shadows {
            try!(os.write_bool(5, v));
        };
        if let Some(v) = self.transparency {
            try!(os.write_double(6, v));
        };
        if let Some(v) = self.laser_retro {
            try!(os.write_double(7, v));
        };
        if let Some(v) = self.pose.as_ref() {
            try!(os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.geometry.as_ref() {
            try!(os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.material.as_ref() {
            try!(os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.visible {
            try!(os.write_bool(11, v));
        };
        if let Some(v) = self.delete_me {
            try!(os.write_bool(12, v));
        };
        if let Some(v) = self.is_static {
            try!(os.write_bool(13, v));
        };
        if let Some(v) = self.plugin.as_ref() {
            try!(os.write_tag(14, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.scale.as_ref() {
            try!(os.write_tag(15, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.meta.as_ref() {
            try!(os.write_tag(16, ::protobuf::wire_format::WireTypeLengthDelimited));
            try!(os.write_raw_varint32(v.get_cached_size()));
            try!(v.write_to_with_cached_sizes(os));
        };
        if let Some(v) = self.field_type {
            try!(os.write_enum(17, v.value()));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<Visual>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for Visual {
    fn new() -> Visual {
        Visual::new()
    }

    fn descriptor_static(_: ::std::option::Option<Visual>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor(
                    "name",
                    Visual::has_name,
                    Visual::get_name,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_u32_accessor(
                    "id",
                    Visual::has_id,
                    Visual::get_id,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor(
                    "parent_name",
                    Visual::has_parent_name,
                    Visual::get_parent_name,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_u32_accessor(
                    "parent_id",
                    Visual::has_parent_id,
                    Visual::get_parent_id,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor(
                    "cast_shadows",
                    Visual::has_cast_shadows,
                    Visual::get_cast_shadows,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_f64_accessor(
                    "transparency",
                    Visual::has_transparency,
                    Visual::get_transparency,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_f64_accessor(
                    "laser_retro",
                    Visual::has_laser_retro,
                    Visual::get_laser_retro,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "pose",
                    Visual::has_pose,
                    Visual::get_pose,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "geometry",
                    Visual::has_geometry,
                    Visual::get_geometry,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "material",
                    Visual::has_material,
                    Visual::get_material,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor(
                    "visible",
                    Visual::has_visible,
                    Visual::get_visible,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor(
                    "delete_me",
                    Visual::has_delete_me,
                    Visual::get_delete_me,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor(
                    "is_static",
                    Visual::has_is_static,
                    Visual::get_is_static,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "plugin",
                    Visual::has_plugin,
                    Visual::get_plugin,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "scale",
                    Visual::has_scale,
                    Visual::get_scale,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "meta",
                    Visual::has_meta,
                    Visual::get_meta,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_enum_accessor(
                    "type",
                    Visual::has_field_type,
                    Visual::get_field_type,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Visual>(
                    "Visual",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for Visual {
    fn clear(&mut self) {
        self.clear_name();
        self.clear_id();
        self.clear_parent_name();
        self.clear_parent_id();
        self.clear_cast_shadows();
        self.clear_transparency();
        self.clear_laser_retro();
        self.clear_pose();
        self.clear_geometry();
        self.clear_material();
        self.clear_visible();
        self.clear_delete_me();
        self.clear_is_static();
        self.clear_plugin();
        self.clear_scale();
        self.clear_meta();
        self.clear_field_type();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for Visual {
    fn eq(&self, other: &Visual) -> bool {
        self.name == other.name &&
        self.id == other.id &&
        self.parent_name == other.parent_name &&
        self.parent_id == other.parent_id &&
        self.cast_shadows == other.cast_shadows &&
        self.transparency == other.transparency &&
        self.laser_retro == other.laser_retro &&
        self.pose == other.pose &&
        self.geometry == other.geometry &&
        self.material == other.material &&
        self.visible == other.visible &&
        self.delete_me == other.delete_me &&
        self.is_static == other.is_static &&
        self.plugin == other.plugin &&
        self.scale == other.scale &&
        self.meta == other.meta &&
        self.field_type == other.field_type &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for Visual {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,Default)]
pub struct Visual_Meta {
    // message fields
    layer: ::std::option::Option<i32>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for Visual_Meta {}

impl Visual_Meta {
    pub fn new() -> Visual_Meta {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static Visual_Meta {
        static mut instance: ::protobuf::lazy::Lazy<Visual_Meta> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Visual_Meta,
        };
        unsafe {
            instance.get(|| {
                Visual_Meta {
                    layer: ::std::option::Option::None,
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // optional int32 layer = 1;

    pub fn clear_layer(&mut self) {
        self.layer = ::std::option::Option::None;
    }

    pub fn has_layer(&self) -> bool {
        self.layer.is_some()
    }

    // Param is passed by value, moved
    pub fn set_layer(&mut self, v: i32) {
        self.layer = ::std::option::Option::Some(v);
    }

    pub fn get_layer(&self) -> i32 {
        self.layer.unwrap_or(0)
    }
}

impl ::protobuf::Message for Visual_Meta {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    let tmp = try!(is.read_int32());
                    self.layer = ::std::option::Option::Some(tmp);
                },
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields()));
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.layer {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.layer {
            try!(os.write_int32(1, v));
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<Visual_Meta>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for Visual_Meta {
    fn new() -> Visual_Meta {
        Visual_Meta::new()
    }

    fn descriptor_static(_: ::std::option::Option<Visual_Meta>) -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_i32_accessor(
                    "layer",
                    Visual_Meta::has_layer,
                    Visual_Meta::get_layer,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Visual_Meta>(
                    "Visual_Meta",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }
}

impl ::protobuf::Clear for Visual_Meta {
    fn clear(&mut self) {
        self.clear_layer();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for Visual_Meta {
    fn eq(&self, other: &Visual_Meta) -> bool {
        self.layer == other.layer &&
        self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for Visual_Meta {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Visual_Type {
    ENTITY = 0,
    MODEL = 1,
    LINK = 2,
    VISUAL = 3,
    COLLISION = 4,
    SENSOR = 5,
    GUI = 6,
    PHYSICS = 7,
}

impl ::protobuf::ProtobufEnum for Visual_Type {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Visual_Type> {
        match value {
            0 => ::std::option::Option::Some(Visual_Type::ENTITY),
            1 => ::std::option::Option::Some(Visual_Type::MODEL),
            2 => ::std::option::Option::Some(Visual_Type::LINK),
            3 => ::std::option::Option::Some(Visual_Type::VISUAL),
            4 => ::std::option::Option::Some(Visual_Type::COLLISION),
            5 => ::std::option::Option::Some(Visual_Type::SENSOR),
            6 => ::std::option::Option::Some(Visual_Type::GUI),
            7 => ::std::option::Option::Some(Visual_Type::PHYSICS),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Visual_Type] = &[
            Visual_Type::ENTITY,
            Visual_Type::MODEL,
            Visual_Type::LINK,
            Visual_Type::VISUAL,
            Visual_Type::COLLISION,
            Visual_Type::SENSOR,
            Visual_Type::GUI,
            Visual_Type::PHYSICS,
        ];
        values
    }

    fn enum_descriptor_static(_: Option<Visual_Type>) -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("Visual_Type", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Visual_Type {
}

static file_descriptor_proto_data: &'static [u8] = &[
    0x0a, 0x0c, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b,
    0x67, 0x61, 0x7a, 0x65, 0x62, 0x6f, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x1a, 0x0a, 0x70, 0x6f, 0x73,
    0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72,
    0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
    0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e,
    0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x64, 0x2e,
    0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcd, 0x04, 0x0a, 0x06, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c,
    0x12, 0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x12, 0x0a,
    0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x12, 0x13, 0x0a, 0x0b, 0x70, 0x61,
    0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x09, 0x12,
    0x11, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
    0x28, 0x0d, 0x12, 0x14, 0x0a, 0x0c, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f,
    0x77, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x12, 0x14, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e,
    0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x12, 0x13,
    0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x6f, 0x18, 0x07, 0x20,
    0x01, 0x28, 0x01, 0x12, 0x1f, 0x0a, 0x04, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
    0x0b, 0x32, 0x11, 0x2e, 0x67, 0x61, 0x7a, 0x65, 0x62, 0x6f, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e,
    0x50, 0x6f, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79,
    0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x61, 0x7a, 0x65, 0x62, 0x6f, 0x2e,
    0x6d, 0x73, 0x67, 0x73, 0x2e, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x27, 0x0a,
    0x08, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
    0x15, 0x2e, 0x67, 0x61, 0x7a, 0x65, 0x62, 0x6f, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x4d, 0x61,
    0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x0f, 0x0a, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c,
    0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x12, 0x11, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74,
    0x65, 0x5f, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x12, 0x11, 0x0a, 0x09, 0x69, 0x73,
    0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x12, 0x23, 0x0a,
    0x06, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
    0x67, 0x61, 0x7a, 0x65, 0x62, 0x6f, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x50, 0x6c, 0x75, 0x67,
    0x69, 0x6e, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
    0x0b, 0x32, 0x15, 0x2e, 0x67, 0x61, 0x7a, 0x65, 0x62, 0x6f, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e,
    0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x33, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61,
    0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x61, 0x7a, 0x65, 0x62, 0x6f, 0x2e,
    0x6d, 0x73, 0x67, 0x73, 0x2e, 0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x2e, 0x4d, 0x65, 0x74, 0x61,
    0x12, 0x26, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
    0x2e, 0x67, 0x61, 0x7a, 0x65, 0x62, 0x6f, 0x2e, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x56, 0x69, 0x73,
    0x75, 0x61, 0x6c, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x15, 0x0a, 0x04, 0x4d, 0x65, 0x74, 0x61,
    0x12, 0x0d, 0x0a, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x22,
    0x64, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x4e, 0x54, 0x49, 0x54,
    0x59, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x10, 0x01, 0x12, 0x08,
    0x0a, 0x04, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x56, 0x49, 0x53, 0x55,
    0x41, 0x4c, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4c, 0x4c, 0x49, 0x53, 0x49, 0x4f,
    0x4e, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x10, 0x05, 0x12,
    0x07, 0x0a, 0x03, 0x47, 0x55, 0x49, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x48, 0x59, 0x53,
    0x49, 0x43, 0x53, 0x10, 0x07, 0x4a, 0xfa, 0x12, 0x0a, 0x06, 0x12, 0x04, 0x00, 0x00, 0x44, 0x01,
    0x0a, 0x08, 0x0a, 0x01, 0x02, 0x12, 0x03, 0x00, 0x08, 0x13, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x00,
    0x12, 0x03, 0x07, 0x07, 0x13, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x01, 0x12, 0x03, 0x08, 0x07, 0x17,
    0x0a, 0x09, 0x0a, 0x02, 0x03, 0x02, 0x12, 0x03, 0x09, 0x07, 0x17, 0x0a, 0x09, 0x0a, 0x02, 0x03,
    0x03, 0x12, 0x03, 0x0a, 0x07, 0x15, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x04, 0x12, 0x03, 0x0b, 0x07,
    0x17, 0x0a, 0x0a, 0x0a, 0x02, 0x04, 0x00, 0x12, 0x04, 0x0d, 0x00, 0x44, 0x01, 0x0a, 0x0a, 0x0a,
    0x03, 0x04, 0x00, 0x01, 0x12, 0x03, 0x0d, 0x08, 0x0e, 0x0a, 0xb2, 0x01, 0x0a, 0x04, 0x04, 0x00,
    0x03, 0x00, 0x12, 0x04, 0x12, 0x02, 0x18, 0x03, 0x1a, 0xa3, 0x01, 0x2f, 0x20, 0x5c, 0x62, 0x72,
    0x69, 0x65, 0x66, 0x20, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x20, 0x6d, 0x65, 0x74,
    0x61, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x66, 0x6f,
    0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x2e, 0x20, 0x54, 0x68,
    0x65, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x0a, 0x2f, 0x20,
    0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e,
    0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x68,
    0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20,
    0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x20, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
    0x61, 0x6c, 0x0a, 0x2f, 0x20, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x74, 0x6f,
    0x20, 0x61, 0x6e, 0x20, 0x65, 0x6e, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x0a, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x00, 0x03, 0x00, 0x01, 0x12, 0x03, 0x12, 0x0a, 0x0e, 0x0a, 0xc4, 0x01, 0x0a,
    0x06, 0x04, 0x00, 0x03, 0x00, 0x02, 0x00, 0x12, 0x03, 0x17, 0x04, 0x23, 0x1a, 0xb4, 0x01, 0x2f,
    0x20, 0x5c, 0x62, 0x72, 0x69, 0x65, 0x66, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6c, 0x61, 0x79, 0x65,
    0x72, 0x20, 0x69, 0x6e, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20,
    0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x20, 0x69, 0x73, 0x20, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
    0x79, 0x65, 0x64, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x20, 0x6e,
    0x75, 0x6d, 0x62, 0x65, 0x72, 0x0a, 0x2f, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x66, 0x75,
    0x6c, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x2c, 0x20,
    0x73, 0x75, 0x63, 0x68, 0x20, 0x61, 0x73, 0x20, 0x47, 0x61, 0x7a, 0x65, 0x62, 0x6f, 0x2c, 0x20,
    0x74, 0x68, 0x61, 0x74, 0x20, 0x70, 0x75, 0x74, 0x20, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x73,
    0x20, 0x69, 0x6e, 0x20, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x0a, 0x2f, 0x20,
    0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x65, 0x6e, 0x68, 0x61, 0x6e,
    0x63, 0x65, 0x64, 0x20, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
    0x6e, 0x2e, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x00, 0x04, 0x12, 0x03,
    0x17, 0x04, 0x0c, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x00, 0x05, 0x12, 0x03,
    0x17, 0x0d, 0x12, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03,
    0x17, 0x13, 0x18, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x03, 0x00, 0x02, 0x00, 0x03, 0x12, 0x03,
    0x17, 0x21, 0x22, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x00, 0x04, 0x00, 0x12, 0x04, 0x1a, 0x02, 0x2c,
    0x03, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x04, 0x00, 0x01, 0x12, 0x03, 0x1a, 0x07, 0x0b, 0x0a,
    0x26, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02, 0x00, 0x12, 0x03, 0x1d, 0x04, 0x12, 0x1a, 0x17,
    0x2f, 0x20, 0x5c, 0x62, 0x72, 0x69, 0x65, 0x66, 0x20, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20,
    0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02,
    0x00, 0x01, 0x12, 0x03, 0x1d, 0x04, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02,
    0x00, 0x02, 0x12, 0x03, 0x1d, 0x10, 0x11, 0x0a, 0x25, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02,
    0x01, 0x12, 0x03, 0x1f, 0x04, 0x12, 0x1a, 0x16, 0x2f, 0x20, 0x5c, 0x62, 0x72, 0x69, 0x65, 0x66,
    0x20, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x20, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x0a, 0x0a, 0x0e,
    0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x1f, 0x04, 0x09, 0x0a, 0x0e,
    0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x01, 0x02, 0x12, 0x03, 0x1f, 0x10, 0x11, 0x0a, 0x24,
    0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02, 0x02, 0x12, 0x03, 0x21, 0x04, 0x12, 0x1a, 0x15, 0x2f,
    0x20, 0x5c, 0x62, 0x72, 0x69, 0x65, 0x66, 0x20, 0x4c, 0x69, 0x6e, 0x6b, 0x20, 0x76, 0x69, 0x73,
    0x75, 0x61, 0x6c, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x02, 0x01, 0x12,
    0x03, 0x21, 0x04, 0x08, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x02, 0x02, 0x12,
    0x03, 0x21, 0x10, 0x11, 0x0a, 0x26, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02, 0x03, 0x12, 0x03,
    0x23, 0x04, 0x12, 0x1a, 0x17, 0x2f, 0x20, 0x5c, 0x62, 0x72, 0x69, 0x65, 0x66, 0x20, 0x56, 0x69,
    0x73, 0x75, 0x61, 0x6c, 0x20, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x0a, 0x0a, 0x0e, 0x0a, 0x07,
    0x04, 0x00, 0x04, 0x00, 0x02, 0x03, 0x01, 0x12, 0x03, 0x23, 0x04, 0x0a, 0x0a, 0x0e, 0x0a, 0x07,
    0x04, 0x00, 0x04, 0x00, 0x02, 0x03, 0x02, 0x12, 0x03, 0x23, 0x10, 0x11, 0x0a, 0x29, 0x0a, 0x06,
    0x04, 0x00, 0x04, 0x00, 0x02, 0x04, 0x12, 0x03, 0x25, 0x04, 0x12, 0x1a, 0x1a, 0x2f, 0x20, 0x5c,
    0x62, 0x72, 0x69, 0x65, 0x66, 0x20, 0x43, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20,
    0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02,
    0x04, 0x01, 0x12, 0x03, 0x25, 0x04, 0x0d, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02,
    0x04, 0x02, 0x12, 0x03, 0x25, 0x10, 0x11, 0x0a, 0x26, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02,
    0x05, 0x12, 0x03, 0x27, 0x04, 0x12, 0x1a, 0x17, 0x2f, 0x20, 0x5c, 0x62, 0x72, 0x69, 0x65, 0x66,
    0x20, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x20, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x0a, 0x0a,
    0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x05, 0x01, 0x12, 0x03, 0x27, 0x04, 0x0a, 0x0a,
    0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x05, 0x02, 0x12, 0x03, 0x27, 0x10, 0x11, 0x0a,
    0x23, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02, 0x06, 0x12, 0x03, 0x29, 0x04, 0x12, 0x1a, 0x14,
    0x2f, 0x20, 0x5c, 0x62, 0x72, 0x69, 0x65, 0x66, 0x20, 0x47, 0x55, 0x49, 0x20, 0x76, 0x69, 0x73,
    0x75, 0x61, 0x6c, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x06, 0x01, 0x12,
    0x03, 0x29, 0x04, 0x07, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x06, 0x02, 0x12,
    0x03, 0x29, 0x10, 0x11, 0x0a, 0x2c, 0x0a, 0x06, 0x04, 0x00, 0x04, 0x00, 0x02, 0x07, 0x12, 0x03,
    0x2b, 0x04, 0x12, 0x1a, 0x1d, 0x2f, 0x20, 0x5c, 0x62, 0x72, 0x69, 0x65, 0x66, 0x20, 0x50, 0x68,
    0x79, 0x73, 0x69, 0x63, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x76, 0x69, 0x73, 0x75, 0x61,
    0x6c, 0x0a, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x07, 0x01, 0x12, 0x03, 0x2b,
    0x04, 0x0b, 0x0a, 0x0e, 0x0a, 0x07, 0x04, 0x00, 0x04, 0x00, 0x02, 0x07, 0x02, 0x12, 0x03, 0x2b,
    0x10, 0x11, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x00, 0x12, 0x03, 0x2e, 0x02, 0x23, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x04, 0x12, 0x03, 0x2e, 0x02, 0x0a, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x00, 0x05, 0x12, 0x03, 0x2e, 0x0b, 0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x2e, 0x12, 0x16, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02,
    0x00, 0x03, 0x12, 0x03, 0x2e, 0x21, 0x22, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x01, 0x12,
    0x03, 0x2f, 0x02, 0x23, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x04, 0x12, 0x03, 0x2f,
    0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x05, 0x12, 0x03, 0x2f, 0x0b, 0x11,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x2f, 0x12, 0x14, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x03, 0x12, 0x03, 0x2f, 0x21, 0x22, 0x0a, 0x0b, 0x0a, 0x04,
    0x04, 0x00, 0x02, 0x02, 0x12, 0x03, 0x30, 0x02, 0x23, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02,
    0x02, 0x04, 0x12, 0x03, 0x30, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x05,
    0x12, 0x03, 0x30, 0x0b, 0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x01, 0x12, 0x03,
    0x30, 0x12, 0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x03, 0x12, 0x03, 0x30, 0x21,
    0x22, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x03, 0x12, 0x03, 0x31, 0x02, 0x23, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x00, 0x02, 0x03, 0x04, 0x12, 0x03, 0x31, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x00, 0x02, 0x03, 0x05, 0x12, 0x03, 0x31, 0x0b, 0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00,
    0x02, 0x03, 0x01, 0x12, 0x03, 0x31, 0x12, 0x1b, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x03,
    0x03, 0x12, 0x03, 0x31, 0x21, 0x22, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x04, 0x12, 0x03,
    0x32, 0x02, 0x23, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x04, 0x04, 0x12, 0x03, 0x32, 0x02,
    0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x04, 0x05, 0x12, 0x03, 0x32, 0x0b, 0x0f, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x04, 0x01, 0x12, 0x03, 0x32, 0x10, 0x1c, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x04, 0x03, 0x12, 0x03, 0x32, 0x21, 0x22, 0x0a, 0x0b, 0x0a, 0x04, 0x04,
    0x00, 0x02, 0x05, 0x12, 0x03, 0x33, 0x02, 0x23, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x05,
    0x04, 0x12, 0x03, 0x33, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x05, 0x05, 0x12,
    0x03, 0x33, 0x0b, 0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x05, 0x01, 0x12, 0x03, 0x33,
    0x12, 0x1e, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x05, 0x03, 0x12, 0x03, 0x33, 0x21, 0x22,
    0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x06, 0x12, 0x03, 0x34, 0x02, 0x23, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x06, 0x04, 0x12, 0x03, 0x34, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x06, 0x05, 0x12, 0x03, 0x34, 0x0b, 0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02,
    0x06, 0x01, 0x12, 0x03, 0x34, 0x12, 0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x06, 0x03,
    0x12, 0x03, 0x34, 0x21, 0x22, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x07, 0x12, 0x03, 0x35,
    0x02, 0x23, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x07, 0x04, 0x12, 0x03, 0x35, 0x02, 0x0a,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x07, 0x06, 0x12, 0x03, 0x35, 0x0b, 0x0f, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x00, 0x02, 0x07, 0x01, 0x12, 0x03, 0x35, 0x10, 0x14, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x00, 0x02, 0x07, 0x03, 0x12, 0x03, 0x35, 0x21, 0x22, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00,
    0x02, 0x08, 0x12, 0x03, 0x36, 0x02, 0x23, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x08, 0x04,
    0x12, 0x03, 0x36, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x08, 0x06, 0x12, 0x03,
    0x36, 0x0b, 0x13, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x08, 0x01, 0x12, 0x03, 0x36, 0x14,
    0x1c, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x08, 0x03, 0x12, 0x03, 0x36, 0x21, 0x22, 0x0a,
    0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x09, 0x12, 0x03, 0x37, 0x02, 0x24, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x00, 0x02, 0x09, 0x04, 0x12, 0x03, 0x37, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00,
    0x02, 0x09, 0x06, 0x12, 0x03, 0x37, 0x0b, 0x13, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x09,
    0x01, 0x12, 0x03, 0x37, 0x14, 0x1c, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x09, 0x03, 0x12,
    0x03, 0x37, 0x21, 0x23, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x0a, 0x12, 0x03, 0x39, 0x02,
    0x24, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x0a, 0x04, 0x12, 0x03, 0x39, 0x02, 0x0a, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x0a, 0x05, 0x12, 0x03, 0x39, 0x0b, 0x0f, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x0a, 0x01, 0x12, 0x03, 0x39, 0x10, 0x17, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x0a, 0x03, 0x12, 0x03, 0x39, 0x21, 0x23, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02,
    0x0b, 0x12, 0x03, 0x3a, 0x02, 0x24, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x0b, 0x04, 0x12,
    0x03, 0x3a, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x0b, 0x05, 0x12, 0x03, 0x3a,
    0x0b, 0x0f, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x0b, 0x01, 0x12, 0x03, 0x3a, 0x10, 0x19,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x0b, 0x03, 0x12, 0x03, 0x3a, 0x21, 0x23, 0x0a, 0x0b,
    0x0a, 0x04, 0x04, 0x00, 0x02, 0x0c, 0x12, 0x03, 0x3b, 0x02, 0x24, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x0c, 0x04, 0x12, 0x03, 0x3b, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02,
    0x0c, 0x05, 0x12, 0x03, 0x3b, 0x0b, 0x0f, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x0c, 0x01,
    0x12, 0x03, 0x3b, 0x10, 0x19, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x0c, 0x03, 0x12, 0x03,
    0x3b, 0x21, 0x23, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x0d, 0x12, 0x03, 0x3c, 0x02, 0x24,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x0d, 0x04, 0x12, 0x03, 0x3c, 0x02, 0x0a, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x00, 0x02, 0x0d, 0x06, 0x12, 0x03, 0x3c, 0x0b, 0x11, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x00, 0x02, 0x0d, 0x01, 0x12, 0x03, 0x3c, 0x12, 0x18, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00,
    0x02, 0x0d, 0x03, 0x12, 0x03, 0x3c, 0x21, 0x23, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x0e,
    0x12, 0x03, 0x3d, 0x02, 0x24, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x0e, 0x04, 0x12, 0x03,
    0x3d, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x0e, 0x06, 0x12, 0x03, 0x3d, 0x0b,
    0x13, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x0e, 0x01, 0x12, 0x03, 0x3d, 0x14, 0x19, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x0e, 0x03, 0x12, 0x03, 0x3d, 0x21, 0x23, 0x0a, 0x4b, 0x0a,
    0x04, 0x04, 0x00, 0x02, 0x0f, 0x12, 0x03, 0x40, 0x02, 0x24, 0x1a, 0x3e, 0x2f, 0x20, 0x5c, 0x62,
    0x72, 0x69, 0x65, 0x66, 0x20, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x65, 0x74, 0x61,
    0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x61, 0x73, 0x73,
    0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x69,
    0x73, 0x20, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00,
    0x02, 0x0f, 0x04, 0x12, 0x03, 0x40, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x0f,
    0x06, 0x12, 0x03, 0x40, 0x0b, 0x0f, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x0f, 0x01, 0x12,
    0x03, 0x40, 0x10, 0x14, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x0f, 0x03, 0x12, 0x03, 0x40,
    0x21, 0x23, 0x0a, 0x26, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x10, 0x12, 0x03, 0x43, 0x02, 0x24, 0x1a,
    0x19, 0x2f, 0x20, 0x5c, 0x62, 0x72, 0x69, 0x65, 0x66, 0x20, 0x54, 0x79, 0x70, 0x65, 0x20, 0x6f,
    0x66, 0x20, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x2e, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00,
    0x02, 0x10, 0x04, 0x12, 0x03, 0x43, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x10,
    0x06, 0x12, 0x03, 0x43, 0x0b, 0x0f, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x10, 0x01, 0x12,
    0x03, 0x43, 0x10, 0x14, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x10, 0x03, 0x12, 0x03, 0x43,
    0x21, 0x23,
];

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
